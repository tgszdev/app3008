import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'
import axios from 'axios'

dotenv.config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY
const supabase = createClient(supabaseUrl, supabaseKey)

// URL da aplica√ß√£o
const APP_URL = 'https://www.ithostbr.tech'

// Cores para output
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
}

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`)
}

function logTest(testId, description, status, details = '') {
  const icon = status === 'PASS' ? '‚úÖ' : status === 'FAIL' ? '‚ùå' : '‚ö†Ô∏è'
  const color = status === 'PASS' ? 'green' : status === 'FAIL' ? 'red' : 'yellow'
  log(`${icon} [${testId}] ${description}: ${status}`, color)
  if (details) {
    log(`   ‚îî‚îÄ ${details}`, 'reset')
  }
}

let totalTests = 0
let passedTests = 0
let failedTests = 0
let warnings = 0
const bugs = []

// =============================================================================
// FASE 2: VALIDA√á√ÉO DE APIs
// =============================================================================

async function fase2() {
  log('\n' + '‚ïê'.repeat(80), 'bold')
  log('FASE 2: VALIDA√á√ÉO DE APIs', 'bold')
  log('‚ïê'.repeat(80) + '\n', 'bold')
  
  log('‚ö†Ô∏è  NOTA: Testes de API requerem autentica√ß√£o via navegador', 'yellow')
  log('   Para testes completos, use Postman ou similar com cookies', 'yellow')
  log('   Aqui faremos valida√ß√£o da L√ìGICA das APIs via banco\n', 'yellow')
  
  await teste2_1_apiTicketsGET()
  await teste2_2_apiTicketsById()
  await teste2_3_validacaoContexto()
  await teste2_4_apiComments()
}

// Teste 2.1: API /api/tickets (GET - Listar)
async function teste2_1_apiTicketsGET() {
  log('\nüìã Teste 2.1: API /api/tickets - L√≥gica de Filtro', 'blue')
  log('‚îÄ'.repeat(80))
  
  // Simular filtro de contexto
  const contextId = '6486088e-72ae-461b-8b03-32ca84918882' // Cliente 03
  
  // Buscar tickets que um usu√°rio do Cliente 03 deveria ver
  const { data: ticketsCliente03, count } = await supabase
    .from('tickets')
    .select('id, ticket_number, title, context_id', { count: 'exact' })
    .eq('context_id', contextId)
  
  totalTests++
  if (ticketsCliente03 && ticketsCliente03.length > 0) {
    logTest('2.1.1', 'Filtro por context_id funciona', 'PASS', 
      `${count} tickets do Cliente 03`)
    passedTests++
  } else {
    logTest('2.1.1', 'Filtro por context_id', 'WARN', 
      'Nenhum ticket encontrado para este contexto')
    warnings++
  }
  
  // Verificar que tickets de outros contextos n√£o vazam
  totalTests++
  const { data: allTickets } = await supabase
    .from('tickets')
    .select('id, context_id')
  
  const otherContextTickets = allTickets.filter(t => t.context_id !== contextId)
  
  if (otherContextTickets.length > 0) {
    logTest('2.1.2', 'Isolamento de contextos', 'PASS', 
      `${otherContextTickets.length} tickets em outros contextos (isolados)`)
    passedTests++
  } else {
    logTest('2.1.2', 'Isolamento de contextos', 'WARN', 
      'Todos os tickets no mesmo contexto')
    warnings++
  }
}

// Teste 2.2: API /api/tickets/[id] - Valida√ß√£o de Acesso
async function teste2_2_apiTicketsById() {
  log('\nüìã Teste 2.2: API /api/tickets/[id] - Valida√ß√£o de Acesso', 'blue')
  log('‚îÄ'.repeat(80))
  
  // Buscar um usu√°rio context e seus dados
  const { data: contextUser } = await supabase
    .from('users')
    .select('id, email, user_type, context_id')
    .eq('user_type', 'context')
    .eq('email', 'agro2@agro.com.br')
    .single()
  
  if (!contextUser) {
    logTest('2.2.1', 'Buscar usu√°rio de teste', 'FAIL', 'Usu√°rio n√£o encontrado')
    totalTests++
    failedTests++
    return
  }
  
  // Buscar tickets do contexto do usu√°rio
  const { data: allowedTickets } = await supabase
    .from('tickets')
    .select('id, ticket_number, context_id')
    .eq('context_id', contextUser.context_id)
    .limit(1)
  
  // Buscar tickets de OUTRO contexto
  const { data: forbiddenTickets } = await supabase
    .from('tickets')
    .select('id, ticket_number, context_id')
    .neq('context_id', contextUser.context_id)
    .limit(1)
  
  totalTests++
  if (allowedTickets && allowedTickets.length > 0) {
    logTest('2.2.1', 'Acesso a ticket autorizado (l√≥gica)', 'PASS', 
      `Ticket #${allowedTickets[0].ticket_number} do mesmo contexto`)
    passedTests++
  } else {
    logTest('2.2.1', 'Acesso a ticket autorizado', 'WARN', 
      'Nenhum ticket no contexto do usu√°rio')
    warnings++
  }
  
  totalTests++
  if (forbiddenTickets && forbiddenTickets.length > 0) {
    logTest('2.2.2', 'Bloqueio a ticket n√£o autorizado (l√≥gica)', 'PASS', 
      `Ticket #${forbiddenTickets[0].ticket_number} de outro contexto deve ser bloqueado`)
    passedTests++
    
    log('   Valida√ß√£o:', 'reset')
    log(`      - Usu√°rio context_id: ${contextUser.context_id}`, 'reset')
    log(`      - Ticket context_id: ${forbiddenTickets[0].context_id}`, 'reset')
    log(`      - Match: ${contextUser.context_id === forbiddenTickets[0].context_id ? '‚úÖ' : '‚ùå (correto - deve bloquear)'}`, 'reset')
  } else {
    logTest('2.2.2', 'Bloqueio a ticket n√£o autorizado', 'WARN', 
      'Todos os tickets no mesmo contexto')
    warnings++
  }
  
  // Testar usu√°rio matrix
  const { data: matrixUser } = await supabase
    .from('users')
    .select('id, email, user_type')
    .eq('user_type', 'matrix')
    .limit(1)
    .single()
  
  totalTests++
  if (matrixUser) {
    // Buscar associa√ß√µes do usu√°rio matrix
    const { data: associations } = await supabase
      .from('user_contexts')
      .select('context_id')
      .eq('user_id', matrixUser.id)
    
    const associatedContextIds = associations?.map(a => a.context_id) || []
    
    logTest('2.2.3', 'Usu√°rio matrix com m√∫ltiplas associa√ß√µes', 'PASS', 
      `${associatedContextIds.length} contextos associados`)
    passedTests++
    
    // Verificar que s√≥ v√™ tickets dos contextos associados
    const { data: matrixTickets } = await supabase
      .from('tickets')
      .select('id, context_id')
      .in('context_id', associatedContextIds)
    
    log(`   ‚îî‚îÄ Deve ver ${matrixTickets?.length || 0} tickets`, 'reset')
  } else {
    logTest('2.2.3', 'Usu√°rio matrix', 'WARN', 'Nenhum usu√°rio matrix encontrado')
    warnings++
  }
}

// Teste 2.3: Valida√ß√£o de Contexto em Opera√ß√µes
async function teste2_3_validacaoContexto() {
  log('\nüìã Teste 2.3: Valida√ß√£o de Contexto em Opera√ß√µes', 'blue')
  log('‚îÄ'.repeat(80))
  
  // Verificar se todos os tickets t√™m context_id v√°lido
  totalTests++
  const { data: tickets } = await supabase
    .from('tickets')
    .select('id, ticket_number, context_id')
  
  const ticketsWithoutContext = tickets?.filter(t => !t.context_id) || []
  
  if (ticketsWithoutContext.length === 0) {
    logTest('2.3.1', 'Todos os tickets t√™m context_id', 'PASS', 
      `${tickets?.length || 0} tickets validados`)
    passedTests++
  } else {
    logTest('2.3.1', 'Tickets sem context_id', 'FAIL', 
      `${ticketsWithoutContext.length} tickets √≥rf√£os`)
    failedTests++
    
    bugs.push({
      prioridade: 'ALTA',
      area: 'Integridade de Dados',
      descricao: `${ticketsWithoutContext.length} tickets sem context_id`,
      teste: '2.3.1'
    })
  }
  
  // Verificar se todos os context_id s√£o v√°lidos
  totalTests++
  let invalidContexts = 0
  
  for (const ticket of tickets || []) {
    if (ticket.context_id) {
      const { data: context } = await supabase
        .from('contexts')
        .select('id')
        .eq('id', ticket.context_id)
        .single()
      
      if (!context) {
        invalidContexts++
      }
    }
  }
  
  if (invalidContexts === 0) {
    logTest('2.3.2', 'Todos os context_id s√£o v√°lidos', 'PASS', 
      'Integridade referencial OK')
    passedTests++
  } else {
    logTest('2.3.2', 'Context_id inv√°lidos', 'FAIL', 
      `${invalidContexts} tickets com contexto inexistente`)
    failedTests++
    
    bugs.push({
      prioridade: 'ALTA',
      area: 'Integridade Referencial',
      descricao: `${invalidContexts} tickets referenciam contextos inexistentes`,
      teste: '2.3.2'
    })
  }
}

// Teste 2.4: API de Coment√°rios
async function teste2_4_apiComments() {
  log('\nüìã Teste 2.4: API /api/comments - Filtro por Contexto', 'blue')
  log('‚îÄ'.repeat(80))
  
  // Buscar coment√°rios e verificar se pertencem a tickets v√°lidos
  const { data: comments, count } = await supabase
    .from('ticket_comments')
    .select(`
      id, 
      ticket_id,
      is_internal,
      tickets(id, context_id, title)
    `, { count: 'exact' })
    .limit(100)
  
  totalTests++
  if (!comments || comments.length === 0) {
    logTest('2.4.1', 'Buscar coment√°rios', 'WARN', 'Nenhum coment√°rio encontrado')
    warnings++
    return
  }
  
  logTest('2.4.1', 'Buscar coment√°rios', 'PASS', `${count} coment√°rios encontrados`)
  passedTests++
  
  // Verificar se todos os coment√°rios pertencem a tickets v√°lidos
  totalTests++
  const orphanComments = comments.filter(c => !c.tickets)
  
  if (orphanComments.length === 0) {
    logTest('2.4.2', 'Coment√°rios vinculados a tickets v√°lidos', 'PASS', 
      'Todos os coment√°rios t√™m ticket v√°lido')
    passedTests++
  } else {
    logTest('2.4.2', 'Coment√°rios √≥rf√£os', 'FAIL', 
      `${orphanComments.length} coment√°rios sem ticket v√°lido`)
    failedTests++
    
    bugs.push({
      prioridade: 'M√âDIA',
      area: 'Integridade de Dados',
      descricao: `${orphanComments.length} coment√°rios √≥rf√£os`,
      teste: '2.4.2'
    })
  }
  
  // Simular filtro: usu√°rio s√≥ deve ver coment√°rios de tickets do seu contexto
  const contextId = '6486088e-72ae-461b-8b03-32ca84918882' // Cliente 03
  const commentsInContext = comments.filter(c => c.tickets?.context_id === contextId)
  
  totalTests++
  logTest('2.4.3', 'Filtro de coment√°rios por contexto', 'PASS', 
    `${commentsInContext.length} coment√°rios do Cliente 03`)
  passedTests++
  
  // Verificar coment√°rios internos
  const internalComments = comments.filter(c => c.is_internal === true)
  
  log(`\n   Estat√≠sticas:`, 'reset')
  log(`      - Total de coment√°rios: ${comments.length}`, 'reset')
  log(`      - Coment√°rios internos: ${internalComments.length}`, 'reset')
  log(`      - Coment√°rios p√∫blicos: ${comments.length - internalComments.length}`, 'reset')
}

// =============================================================================
// EXECUTAR TESTES
// =============================================================================

async function executarTestes() {
  const startTime = Date.now()
  
  log('\n' + '‚ïî' + '‚ïê'.repeat(78) + '‚ïó', 'bold')
  log('‚ïë' + ' '.repeat(24) + 'TESTE COMPLETO - FASE 2: APIs' + ' '.repeat(24) + '‚ïë', 'bold')
  log('‚ïö' + '‚ïê'.repeat(78) + '‚ïù', 'bold')
  
  await fase2()
  
  // Resumo
  const endTime = Date.now()
  const duration = ((endTime - startTime) / 1000).toFixed(2)
  
  log('\n' + '‚ïê'.repeat(80), 'bold')
  log('RESUMO DOS TESTES - FASE 2', 'bold')
  log('‚ïê'.repeat(80), 'bold')
  
  log(`\nTotal de testes: ${totalTests}`, 'reset')
  log(`‚úÖ Aprovados: ${passedTests}`, 'green')
  log(`‚ùå Reprovados: ${failedTests}`, 'red')
  log(`‚ö†Ô∏è  Avisos: ${warnings}`, 'yellow')
  log(`‚è±Ô∏è  Tempo: ${duration}s`, 'blue')
  
  const successRate = totalTests > 0 ? ((passedTests / totalTests) * 100).toFixed(1) : 0
  log(`\nüìä Taxa de sucesso: ${successRate}%`, successRate >= 90 ? 'green' : successRate >= 70 ? 'yellow' : 'red')
  
  // Listar bugs
  if (bugs.length > 0) {
    log('\n' + '‚ïê'.repeat(80), 'bold')
    log('üêõ BUGS ENCONTRADOS', 'red')
    log('‚ïê'.repeat(80), 'bold')
    
    bugs.forEach((bug, i) => {
      log(`\n[${bug.prioridade}] ${bug.area} - Teste ${bug.teste}`, 'red')
      log(`‚îî‚îÄ ${bug.descricao}`, 'reset')
    })
  }
  
  log('\n' + '‚ïê'.repeat(80) + '\n', 'bold')
  
  // Status final
  if (failedTests === 0 && bugs.length === 0) {
    log('‚úÖ FASE 2: APROVADA', 'green')
  } else if (failedTests <= 2) {
    log('‚ö†Ô∏è  FASE 2: APROVADA COM RESSALVAS', 'yellow')
  } else {
    log('‚ùå FASE 2: REPROVADA', 'red')
  }
}

executarTestes()

