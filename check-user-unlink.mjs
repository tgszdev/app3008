#!/usr/bin/env node

import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

dotenv.config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o encontradas')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function checkUserUnlink() {
  console.log('üîç VERIFICANDO DESVINCULA√á√ÉO DO USU√ÅRIO SIMAS@SIMAS.COM.BR')
  console.log('=' .repeat(70))

  try {
    // 1. Verificar dados do usu√°rio
    console.log('\n1Ô∏è‚É£ DADOS DO USU√ÅRIO SIMAS@SIMAS.COM.BR...')
    
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('email', 'simas@simas.com.br')
      .single()

    if (userError) {
      console.log('‚ùå Usu√°rio n√£o encontrado:', userError.message)
      return
    }

    console.log('‚úÖ Usu√°rio encontrado:')
    console.log(`  - ID: ${user.id}`)
    console.log(`  - Email: ${user.email}`)
    console.log(`  - User Type: ${user.user_type}`)
    console.log(`  - Context ID: ${user.context_id || 'null'}`)
    console.log(`  - Role: ${user.role}`)
    console.log(`  - Is Active: ${user.is_active}`)

    // 2. Verificar associa√ß√µes user_contexts
    console.log('\n2Ô∏è‚É£ ASSOCIA√á√ïES USER_CONTEXTS...')
    
    const { data: userContexts, error: userContextsError } = await supabase
      .from('user_contexts')
      .select('*')
      .eq('user_id', user.id)

    if (userContextsError) {
      console.log('‚ùå Erro ao buscar associa√ß√µes:', userContextsError.message)
    } else {
      console.log('‚úÖ Associa√ß√µes encontradas:', userContexts.length)
      if (userContexts.length === 0) {
        console.log('‚úÖ Usu√°rio foi desvinculado de todas as organiza√ß√µes!')
      } else {
        console.log('‚ùå Usu√°rio ainda tem associa√ß√µes:')
        userContexts.forEach(uc => {
          console.log(`  - Context ID: ${uc.context_id}`)
          console.log(`  - Can Manage: ${uc.can_manage}`)
          console.log(`  - Created: ${uc.created_at}`)
        })
      }
    }

    // 3. Verificar se context_id foi removido
    console.log('\n3Ô∏è‚É£ VERIFICANDO CONTEXT_ID DO USU√ÅRIO...')
    
    if (user.context_id === null) {
      console.log('‚úÖ Context_id foi removido (null)')
    } else {
      console.log('‚ùå Context_id ainda existe:', user.context_id)
      console.log('üîß SOLU√á√ÉO: Remover context_id do usu√°rio')
    }

    // 4. Verificar todas as organiza√ß√µes/contextos
    console.log('\n4Ô∏è‚É£ VERIFICANDO TODAS AS ORGANIZA√á√ïES...')
    
    const { data: allContexts, error: allContextsError } = await supabase
      .from('contexts')
      .select('*')
      .eq('type', 'organization')
      .eq('is_active', true)

    if (allContextsError) {
      console.log('‚ùå Erro ao buscar organiza√ß√µes:', allContextsError.message)
    } else {
      console.log('‚úÖ Organiza√ß√µes encontradas:', allContexts.length)
      allContexts.forEach(ctx => {
        console.log(`  - ${ctx.name}: ${ctx.id}`)
      })
    }

    // 5. Verificar se o usu√°rio est√° associado a alguma organiza√ß√£o
    console.log('\n5Ô∏è‚É£ VERIFICANDO ASSOCIA√á√ïES COM ORGANIZA√á√ïES...')
    
    if (userContexts && userContexts.length > 0) {
      for (const uc of userContexts) {
        const { data: context, error: contextError } = await supabase
          .from('contexts')
          .select('*')
          .eq('id', uc.context_id)
          .single()

        if (contextError) {
          console.log(`‚ùå Erro ao buscar contexto ${uc.context_id}:`, contextError.message)
        } else {
          console.log(`‚ùå Usu√°rio ainda associado a: ${context.name} (${context.type})`)
        }
      }
    } else {
      console.log('‚úÖ Usu√°rio n√£o est√° associado a nenhuma organiza√ß√£o')
    }

    // 6. Verificar categorias que devem aparecer (apenas globais)
    console.log('\n6Ô∏è‚É£ VERIFICANDO CATEGORIAS QUE DEVEM APARECER...')
    
    // Categorias globais
    const { data: globalCats, error: globalCatsError } = await supabase
      .from('categories')
      .select('*')
      .eq('is_global', true)
      .eq('is_active', true)

    if (globalCatsError) {
      console.log('‚ùå Erro ao buscar categorias globais:', globalCatsError.message)
    } else {
      console.log('‚úÖ Categorias globais:', globalCats.length)
      globalCats.forEach(cat => {
        console.log(`  - ${cat.name}`)
      })
    }

    // Categorias espec√≠ficas (n√£o devem aparecer)
    const { data: specificCats, error: specificCatsError } = await supabase
      .from('categories')
      .select('*')
      .eq('is_global', false)
      .eq('is_active', true)

    if (specificCatsError) {
      console.log('‚ùå Erro ao buscar categorias espec√≠ficas:', specificCatsError.message)
    } else {
      console.log('‚úÖ Categorias espec√≠ficas:', specificCats.length)
      console.log('‚ö†Ô∏è Estas categorias N√ÉO devem aparecer para o usu√°rio desvinculado')
    }

    // 7. Testar API de categorias
    console.log('\n7Ô∏è‚É£ TESTANDO API DE CATEGORIAS...')
    
    try {
      const response = await fetch('https://www.ithostbr.tech/api/categories/public?active_only=true')
      const data = await response.json()
      
      if (response.ok) {
        console.log('‚úÖ API funcionando:', data.length, 'categorias')
        
        // Filtrar apenas categorias globais (usu√°rio desvinculado)
        const globalCategories = data.filter(cat => cat.is_global)
        
        console.log('üìã Categorias que devem aparecer para o usu√°rio desvinculado:', globalCategories.length)
        globalCategories.forEach(cat => {
          console.log(`  - ${cat.name}: Global`)
        })
        
        // Verificar se h√° categorias espec√≠ficas (n√£o devem aparecer)
        const specificCategories = data.filter(cat => !cat.is_global)
        console.log('‚ö†Ô∏è Categorias espec√≠ficas que N√ÉO devem aparecer:', specificCategories.length)
        
        if (specificCategories.length > 0) {
          console.log('‚ùå PROBLEMA: API est√° retornando categorias espec√≠ficas para usu√°rio desvinculado!')
          specificCategories.slice(0, 3).forEach(cat => {
            console.log(`  - ${cat.name}: ${cat.context_id}`)
          })
        } else {
          console.log('‚úÖ API est√° funcionando corretamente (apenas categorias globais)')
        }
      } else {
        console.log('‚ùå API com erro:', response.status, data)
      }
    } catch (error) {
      console.log('‚ùå Erro ao testar API:', error.message)
    }

    // 8. Diagn√≥stico final
    console.log('\n8Ô∏è‚É£ DIAGN√ìSTICO FINAL...')
    
    const issues = []
    const solutions = []
    
    if (user.context_id !== null) {
      issues.push('‚ùå Usu√°rio ainda tem context_id')
      solutions.push('üîß Remover context_id do usu√°rio')
    }
    
    if (userContexts && userContexts.length > 0) {
      issues.push('‚ùå Usu√°rio ainda tem associa√ß√µes user_contexts')
      solutions.push('üîß Remover associa√ß√µes user_contexts')
    }

    console.log('üìä RESUMO:')
    console.log(`  - Usu√°rio: ${user.email}`)
    console.log(`  - User Type: ${user.user_type}`)
    console.log(`  - Context ID: ${user.context_id || 'null'}`)
    console.log(`  - Associa√ß√µes: ${userContexts?.length || 0}`)
    console.log(`  - Categorias globais: ${globalCats?.length || 0}`)
    console.log(`  - Categorias espec√≠ficas: ${specificCats?.length || 0}`)

    if (issues.length > 0) {
      console.log('\nüö® PROBLEMAS IDENTIFICADOS:')
      issues.forEach(issue => console.log(`  ${issue}`))
      
      console.log('\nüîß SOLU√á√ïES NECESS√ÅRIAS:')
      solutions.forEach(solution => console.log(`  ${solution}`))
      
      console.log('\n‚ö†Ô∏è CONCLUS√ÉO:')
      console.log('A desvincula√ß√£o via frontend N√ÉO foi refletida corretamente no banco de dados!')
    } else {
      console.log('\n‚úÖ DESVINCULA√á√ÉO REALIZADA COM SUCESSO!')
      console.log('O usu√°rio foi desvinculado de todas as organiza√ß√µes e o banco foi atualizado corretamente.')
    }

  } catch (error) {
    console.error('‚ùå Erro geral:', error)
  }
}

checkUserUnlink()
