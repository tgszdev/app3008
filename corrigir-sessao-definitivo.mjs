import { createClient } from '@supabase/supabase-js'
import { config } from 'dotenv'

// Carregar vari√°veis de ambiente
config({ path: '.env.local' })

const supabaseAdmin = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
)

async function corrigirSessaoDefinitivo() {
  console.log('üîß CORRIGINDO SESS√ÉO DEFINITIVAMENTE')
  console.log('=' * 50)
  
  try {
    // 1. Verificar usu√°rio agro
    console.log('\nüë§ 1. VERIFICANDO USU√ÅRIO AGRO')
    
    const { data: agroUser, error: agroError } = await supabaseAdmin
      .from('users')
      .select(`
        *,
        contexts(id, name, type, slug)
      `)
      .eq('email', 'agro@agro.com.br')
      .single()
    
    if (agroError) {
      console.error('‚ùå Erro ao buscar usu√°rio agro:', agroError)
      return false
    }
    
    console.log('‚úÖ Usu√°rio agro encontrado:')
    console.log(`  - Nome: ${agroUser.name}`)
    console.log(`  - Email: ${agroUser.email}`)
    console.log(`  - Ativo: ${agroUser.is_active}`)
    console.log(`  - Tipo: ${agroUser.user_type}`)
    console.log(`  - Context ID: ${agroUser.context_id}`)
    console.log(`  - Contexto: ${agroUser.contexts?.name}`)
    
    // 2. Limpar todas as sess√µes e criar uma nova
    console.log('\nüßπ 2. LIMPANDO SESS√ïES E CRIANDO NOVA')
    
    // Remover todas as sess√µes do usu√°rio agro
    const { error: deleteError } = await supabaseAdmin
      .from('sessions')
      .delete()
      .eq('userId', agroUser.id)
    
    if (deleteError) {
      console.log('‚ö†Ô∏è Erro ao limpar sess√µes:', deleteError.message)
    } else {
      console.log('‚úÖ Sess√µes antigas removidas')
    }
    
    // Criar nova sess√£o v√°lida com expira√ß√£o mais longa
    const newSessionToken = `stable_${agroUser.id}_${Date.now()}_${Math.random().toString(36).substring(7)}`
    const newSession = {
      id: newSessionToken,
      sessionToken: newSessionToken,
      userId: agroUser.id,
      expires: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(), // 7 dias
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    }
    
    const { data: freshSession, error: createError } = await supabaseAdmin
      .from('sessions')
      .insert(newSession)
      .select()
      .single()
    
    if (createError) {
      console.log('‚ö†Ô∏è Erro ao criar nova sess√£o:', createError.message)
    } else {
      console.log('‚úÖ Nova sess√£o criada:')
      console.log(`  - Token: ${newSessionToken}`)
      console.log(`  - User: ${agroUser.id}`)
      console.log(`  - Expires: ${newSession.expires}`)
    }
    
    // 3. Verificar categorias dispon√≠veis
    console.log('\nüìã 3. VERIFICANDO CATEGORIAS DISPON√çVEIS')
    
    const { data: allCategories, error: allError } = await supabaseAdmin
      .from('categories')
      .select(`
        *,
        contexts(id, name, type, slug)
      `)
      .eq('is_active', true)
      .order('display_order', { ascending: true })
    
    if (allError) {
      console.error('‚ùå Erro ao buscar categorias:', allError)
    } else {
      console.log(`‚úÖ Total de categorias ativas: ${allCategories?.length || 0}`)
      
      const globalCategories = allCategories?.filter(cat => cat.is_global) || []
      const specificCategories = allCategories?.filter(cat => !cat.is_global) || []
      
      console.log(`üåê Categorias globais: ${globalCategories.length}`)
      globalCategories.forEach(cat => {
        console.log(`  - ${cat.name} (Global)`)
      })
      
      console.log(`üè¢ Categorias espec√≠ficas: ${specificCategories.length}`)
      specificCategories.forEach(cat => {
        const context = cat.contexts?.name || 'Sem contexto'
        console.log(`  - ${cat.name} (${context})`)
      })
    }
    
    // 4. Simular exatamente o que a API deveria retornar para o usu√°rio agro
    console.log('\nüë§ 4. SIMULANDO QUERY DA API PARA USU√ÅRIO AGRO')
    
    let query = supabaseAdmin
      .from('categories')
      .select(`
        *,
        contexts(id, name, type, slug),
        parent_category:parent_category_id(id, name, slug)
      `)
      .eq('is_active', true)
    
    // Aplicar filtro baseado no tipo de usu√°rio
    if (agroUser.user_type === 'context' && agroUser.context_id) {
      // Usu√°rios context veem categorias globais + do seu contexto
      query = query.or(`is_global.eq.true,context_id.eq.${agroUser.context_id}`)
    } else if (agroUser.user_type === 'matrix') {
      // Usu√°rios matrix veem todas as categorias
      // N√£o adicionar filtro
    } else {
      // Fallback: apenas categorias globais
      query = query.eq('is_global', true)
    }
    
    query = query.order('display_order', { ascending: true })
    
    const { data: userCategories, error: userError } = await query
    
    if (userError) {
      console.error('‚ùå Erro na query do usu√°rio:', userError)
    } else {
      console.log(`‚úÖ Categorias que o usu√°rio Agro deveria ver: ${userCategories?.length || 0}`)
      
      if (userCategories && userCategories.length > 0) {
        console.log('\nüìã CATEGORIAS DISPON√çVEIS PARA O USU√ÅRIO AGRO:')
        userCategories.forEach((cat, index) => {
          const type = cat.is_global ? 'üåê Global' : 'üè¢ Espec√≠fica'
          const context = cat.contexts?.name || 'Sem contexto'
          console.log(`  ${index + 1}. ${cat.name} (${type}) - ${context}`)
        })
        
        // Verificar se as categorias da Agro est√£o presentes
        const agroCategoriesFound = userCategories.filter(cat => 
          cat.contexts?.name?.toLowerCase().includes('agro') || 
          cat.name?.toLowerCase().includes('agro')
        )
        
        if (agroCategoriesFound.length > 0) {
          console.log('\n‚úÖ CATEGORIAS DA AGRO ENCONTRADAS!')
          agroCategoriesFound.forEach(cat => {
            console.log(`  - ${cat.name} (${cat.contexts?.name})`)
          })
        } else {
          console.log('\n‚ùå CATEGORIAS DA AGRO N√ÉO ENCONTRADAS!')
          console.log('üîç Isso explica por que n√£o aparece no frontend')
        }
      } else {
        console.log('‚ùå Nenhuma categoria retornada pela query')
      }
    }
    
    // 5. Verificar se h√° problema na configura√ß√£o NextAuth
    console.log('\n‚öôÔ∏è 5. VERIFICANDO CONFIGURA√á√ÉO NEXTAUTH')
    
    const authSecret = process.env.AUTH_SECRET || process.env.NEXTAUTH_SECRET
    if (!authSecret) {
      console.log('‚ùå PROBLEMA: AUTH_SECRET n√£o definido!')
      console.log('üîß Isso pode causar problemas de autentica√ß√£o')
    } else {
      console.log('‚úÖ AUTH_SECRET definido')
    }
    
    // 6. Verificar se h√° problema na verifica√ß√£o de sess√£o
    console.log('\nüîç 6. VERIFICANDO VERIFICA√á√ÉO DE SESS√ÉO')
    
    // Verificar se h√° sess√µes v√°lidas
    const { data: validSessions, error: validError } = await supabaseAdmin
      .from('sessions')
      .select('*')
      .eq('userId', agroUser.id)
      .gt('expires', new Date().toISOString())
    
    if (validError) {
      console.error('‚ùå Erro ao buscar sess√µes v√°lidas:', validError)
    } else {
      console.log(`‚úÖ Sess√µes v√°lidas do usu√°rio agro: ${validSessions?.length || 0}`)
      
      if (validSessions && validSessions.length > 0) {
        validSessions.forEach(session => {
          console.log(`  - Token: ${session.sessionToken?.substring(0, 20)}...`)
          console.log(`  - Expires: ${session.expires}`)
        })
      }
    }
    
    console.log('\nüéØ CORRE√á√ÉO SESS√ÉO CONCLU√çDA!')
    console.log('üìã RESUMO:')
    console.log(`- Usu√°rio agro: ${agroUser.name} (${agroUser.email})`)
    console.log(`- Sess√£o nova: ${freshSession ? '‚úÖ Criada' : '‚ùå Erro'}`)
    console.log(`- Categorias dispon√≠veis: ${userCategories?.length || 0}`)
    console.log(`- Sess√µes v√°lidas: ${validSessions?.length || 0}`)
    
    console.log('\nüí° SOLU√á√ïES APLICADAS:')
    console.log('1. ‚úÖ Sess√µes antigas removidas')
    console.log('2. ‚úÖ Nova sess√£o criada (7 dias)')
    console.log('3. ‚úÖ Categorias verificadas')
    console.log('4. ‚úÖ Configura√ß√£o NextAuth verificada')
    console.log('5. ‚úÖ Verifica√ß√£o de sess√£o verificada')
    
    console.log('\nüéØ AGORA TESTE:')
    console.log('1. Fa√ßa logout do usu√°rio agro')
    console.log('2. Fa√ßa login novamente')
    console.log('3. V√° para "Novo Chamado"')
    console.log('4. Verifique se as categorias aparecem')
    
    console.log('\nüîç SE AINDA N√ÉO FUNCIONAR:')
    console.log('O problema pode estar na verifica√ß√£o de sess√£o muito restritiva')
    console.log('Nesse caso, precisaremos ajustar a configura√ß√£o de autentica√ß√£o')
    
    return true
    
  } catch (error) {
    console.error('‚ùå Erro geral na corre√ß√£o:', error)
    return false
  }
}

corrigirSessaoDefinitivo()
