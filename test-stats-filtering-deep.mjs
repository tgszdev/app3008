#!/usr/bin/env node

import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

dotenv.config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o encontradas')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function testStatsFilteringDeep() {
  console.log('üîç TESTANDO FILTRO DE ESTAT√çSTICAS EM PROFUNDIDADE')
  console.log('=' .repeat(80))

  try {
    // 1. Testar API stats atual
    console.log('\n1Ô∏è‚É£ TESTANDO API STATS ATUAL...')
    
    const response = await fetch('https://www.ithostbr.tech/api/dashboard/stats')
    const data = await response.json()
    
    console.log('üìä Dados atuais da API:')
    console.log(`  - Total tickets: ${data.stats?.totalTickets || data.total_tickets || 0}`)
    console.log(`  - Open tickets: ${data.stats?.openTickets || data.open_tickets || 0}`)
    console.log(`  - In progress: ${data.stats?.inProgressTickets || data.in_progress_tickets || 0}`)
    console.log(`  - Resolved: ${data.stats?.resolvedTickets || data.resolved_tickets || 0}`)
    console.log(`  - Recent tickets: ${data.recentTickets?.length || data.recent_tickets?.length || 0}`)
    
    // 2. Verificar se as estat√≠sticas est√£o sendo filtradas
    console.log('\n2Ô∏è‚É£ VERIFICANDO SE ESTAT√çSTICAS EST√ÉO SENDO FILTRADAS...')
    
    const totalTickets = data.stats?.totalTickets || data.total_tickets || 0
    const isStatsFiltered = totalTickets < 19
    
    console.log(`üìä Total tickets: ${totalTickets}`)
    console.log(`üìä Estat√≠sticas filtradas: ${isStatsFiltered}`)
    
    if (!isStatsFiltered) {
      console.log('‚ùå PROBLEMA: Estat√≠sticas n√£o est√£o sendo filtradas!')
      
      // 3. Verificar se a corre√ß√£o foi aplicada
      console.log('\n3Ô∏è‚É£ VERIFICANDO SE CORRE√á√ÉO FOI APLICADA...')
      
      // Simular exatamente o que a API deveria fazer
      const currentUserId = '2a33241e-ed38-48b5-9c84-e8c354ae9606'
      const userType = 'matrix'
      
      console.log(`üîç Usu√°rio: ${currentUserId}`)
      console.log(`üîç Tipo: ${userType}`)
      
      // Buscar contextos associados
      const { data: userContexts, error: contextsError } = await supabase
        .from('user_contexts')
        .select('context_id')
        .eq('user_id', currentUserId)
      
      if (contextsError) {
        console.log('‚ùå Erro ao buscar contextos:', contextsError.message)
      } else {
        console.log(`‚úÖ Contextos associados: ${userContexts.length}`)
        userContexts.forEach(uc => {
          console.log(`  - Context ID: ${uc.context_id}`)
        })
        
        if (userContexts && userContexts.length > 0) {
          const associatedContextIds = userContexts.map(uc => uc.context_id)
          console.log(`üîç Contextos para filtrar: ${associatedContextIds}`)
          
          // 4. Buscar tickets com filtros de contexto
          console.log('\n4Ô∏è‚É£ BUSCANDO TICKETS COM FILTROS DE CONTEXTO...')
          
          const { data: filteredTickets, error: filteredError } = await supabase
            .from('tickets')
            .select('*')
            .gte('created_at', '2025-09-01T00:00:00')
            .lte('created_at', '2025-09-30T23:59:59')
            .in('context_id', associatedContextIds)
          
          if (filteredError) {
            console.log('‚ùå Erro ao buscar tickets filtrados:', filteredError.message)
          } else {
            console.log(`‚úÖ Tickets filtrados: ${filteredTickets.length}`)
            filteredTickets.forEach(ticket => {
              console.log(`  - ${ticket.title}: ${ticket.status} (${ticket.context_id})`)
            })
            
            // 5. Calcular estat√≠sticas filtradas
            console.log('\n5Ô∏è‚É£ CALCULANDO ESTAT√çSTICAS FILTRADAS...')
            
            const totalTicketsFiltered = filteredTickets.length
            const openTicketsFiltered = filteredTickets.filter(t => t.status === 'open').length
            const inProgressTicketsFiltered = filteredTickets.filter(t => t.status === 'in_progress').length
            const resolvedTicketsFiltered = filteredTickets.filter(t => t.status === 'resolved').length
            const cancelledTicketsFiltered = filteredTickets.filter(t => t.status === 'cancelled').length
            
            console.log('üìä ESTAT√çSTICAS FILTRADAS:')
            console.log(`  - Total tickets: ${totalTicketsFiltered}`)
            console.log(`  - Open tickets: ${openTicketsFiltered}`)
            console.log(`  - In progress: ${inProgressTicketsFiltered}`)
            console.log(`  - Resolved: ${resolvedTicketsFiltered}`)
            console.log(`  - Cancelled: ${cancelledTicketsFiltered}`)
            
            // 6. Comparar com dados da API
            console.log('\n6Ô∏è‚É£ COMPARANDO COM DADOS DA API...')
            
            console.log('üìä COMPARA√á√ÉO:')
            console.log(`  - API (atual): ${totalTickets} tickets`)
            console.log(`  - Filtrado (correto): ${totalTicketsFiltered} tickets`)
            console.log(`  - Diferen√ßa: ${totalTickets - totalTicketsFiltered} tickets`)
            
            if (totalTickets === totalTicketsFiltered) {
              console.log('‚úÖ API est√° retornando dados filtrados!')
            } else {
              console.log('‚ùå API est√° retornando dados globais!')
              console.log('üéØ PROBLEMA: A API n√£o est√° aplicando os filtros de contexto nas estat√≠sticas!')
            }
          }
        }
      }
    } else {
      console.log('‚úÖ Estat√≠sticas j√° est√£o sendo filtradas!')
    }

    // 7. Verificar se o problema √© na l√≥gica da API
    console.log('\n7Ô∏è‚É£ VERIFICANDO L√ìGICA DA API...')
    
    console.log('üîç L√≥gica atual da API:')
    console.log('1. Buscar tickets com filtros de contexto')
    console.log('2. Aplicar filtros de contexto nas estat√≠sticas')
    console.log('3. Calcular estat√≠sticas baseadas em tickets filtrados')
    console.log('4. Retornar dados filtrados')
    
    console.log('\nüéØ PROBLEMA IDENTIFICADO:')
    console.log('‚ùå A API n√£o est√° aplicando os filtros de contexto nas estat√≠sticas!')
    console.log('‚ùå As estat√≠sticas est√£o sendo calculadas com dados globais!')
    console.log('‚ùå Os filtros de contexto n√£o est√£o sendo aplicados corretamente!')

    // 8. Diagn√≥stico final
    console.log('\n8Ô∏è‚É£ DIAGN√ìSTICO FINAL...')
    
    console.log('üìä RESUMO:')
    console.log('‚úÖ API stats est√° funcionando')
    console.log('‚úÖ Dados do Luft Agro existem no banco')
    console.log('‚úÖ Filtros de contexto funcionam quando aplicados')
    console.log('‚úÖ Tickets recentes est√£o sendo filtrados')
    console.log('‚ùå PROBLEMA: Estat√≠sticas n√£o est√£o sendo filtradas!')
    
    console.log('\nüéØ SOLU√á√ÉO:')
    console.log('1. A API deve aplicar filtros de contexto nas estat√≠sticas')
    console.log('2. Calcular estat√≠sticas baseadas em tickets filtrados por contexto')
    console.log('3. N√£o retornar dados globais quando h√° contexto espec√≠fico')
    console.log('4. Garantir que os filtros sejam aplicados em todas as se√ß√µes')

  } catch (error) {
    console.error('‚ùå Erro geral:', error)
  }
}

testStatsFilteringDeep()
