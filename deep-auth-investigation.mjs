#!/usr/bin/env node

import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

dotenv.config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o encontradas')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function deepAuthInvestigation() {
  console.log('üîç INVESTIGA√á√ÉO PROFUNDA DE AUTENTICA√á√ÉO')
  console.log('=' .repeat(60))

  try {
    // 1. Verificar configura√ß√£o do NextAuth
    console.log('\n1Ô∏è‚É£ VERIFICANDO CONFIGURA√á√ÉO DO NEXTAUTH...')
    
    console.log('üìã Vari√°veis de ambiente:')
    console.log(`  - NEXTAUTH_URL: ${process.env.NEXTAUTH_URL || 'n√£o definido'}`)
    console.log(`  - AUTH_SECRET: ${process.env.AUTH_SECRET ? 'definido' : 'n√£o definido'}`)
    console.log(`  - NEXTAUTH_SECRET: ${process.env.NEXTAUTH_SECRET ? 'definido' : 'n√£o definido'}`)
    console.log(`  - SUPABASE_URL: ${process.env.NEXT_PUBLIC_SUPABASE_URL ? 'definido' : 'n√£o definido'}`)
    console.log(`  - SUPABASE_KEY: ${process.env.SUPABASE_SERVICE_ROLE_KEY ? 'definido' : 'n√£o definido'}`)

    // 2. Verificar se o problema √© no auth() function
    console.log('\n2Ô∏è‚É£ VERIFICANDO FUN√á√ÉO AUTH()...')
    
    // Simular o que a fun√ß√£o auth() deveria retornar
    console.log('üîç Simulando fun√ß√£o auth():')
    console.log('  - Deveria retornar sess√£o do usu√°rio logado')
    console.log('  - Se retorna null, problema √© na cria√ß√£o da sess√£o')
    console.log('  - Se retorna sess√£o, problema √© na verifica√ß√£o')

    // 3. Verificar se h√° problema com cookies
    console.log('\n3Ô∏è‚É£ VERIFICANDO PROBLEMA COM COOKIES...')
    
    try {
      // Testar se conseguimos acessar a API com headers espec√≠ficos
      const response = await fetch('https://www.ithostbr.tech/api/dashboard/stats', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'User-Agent': 'Mozilla/5.0 (compatible; TestBot/1.0)',
          'Accept': 'application/json',
        }
      })
      
      console.log('üì° Resposta da API:', response.status)
      console.log('üìä Headers da resposta:', Object.fromEntries(response.headers.entries()))
      
      const data = await response.json()
      console.log('üìã Dados:', data)
      
    } catch (error) {
      console.log('‚ùå Erro ao testar API:', error.message)
    }

    // 4. Verificar se o problema √© no Supabase
    console.log('\n4Ô∏è‚É£ VERIFICANDO CONEX√ÉO COM SUPABASE...')
    
    const { data: testData, error: testError } = await supabase
      .from('users')
      .select('id, email')
      .limit(1)

    if (testError) {
      console.log('‚ùå Erro ao conectar com Supabase:', testError.message)
    } else {
      console.log('‚úÖ Conex√£o com Supabase funcionando')
      console.log(`üìä Dados de teste: ${testData?.length || 0} usu√°rios`)
    }

    // 5. Verificar se h√° problema com a sess√£o no banco
    console.log('\n5Ô∏è‚É£ VERIFICANDO SESS√ïES NO BANCO...')
    
    const { data: sessions, error: sessionsError } = await supabase
      .from('sessions')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(5)

    if (sessionsError) {
      console.log('‚ùå Erro ao buscar sess√µes:', sessionsError.message)
    } else {
      console.log('‚úÖ Sess√µes encontradas:', sessions?.length || 0)
      if (sessions && sessions.length > 0) {
        sessions.forEach(session => {
          console.log(`  - Session: ${session.id} (User: ${session.userId})`)
          console.log(`    Expires: ${session.expires}`)
          console.log(`    Created: ${session.created_at}`)
        })
      }
    }

    // 6. Verificar se h√° problema com o usu√°rio espec√≠fico
    console.log('\n6Ô∏è‚É£ VERIFICANDO USU√ÅRIO ESPEC√çFICO...')
    
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('email', 'rodrigues2205@icloud.com')
      .single()

    if (userError) {
      console.log('‚ùå Erro ao buscar usu√°rio:', userError.message)
    } else {
      console.log('‚úÖ Usu√°rio encontrado:')
      console.log(`  - ID: ${user.id}`)
      console.log(`  - Email: ${user.email}`)
      console.log(`  - User Type: ${user.user_type}`)
      console.log(`  - Role: ${user.role}`)
      console.log(`  - Is Active: ${user.is_active}`)
      console.log(`  - Last Login: ${user.last_login}`)
    }

    // 7. Testar se o problema √© na verifica√ß√£o de sess√£o
    console.log('\n7Ô∏è‚É£ TESTANDO VERIFICA√á√ÉO DE SESS√ÉO...')
    
    // Simular o que acontece na API
    console.log('üîç Simulando verifica√ß√£o de sess√£o:')
    console.log('  - session = await auth()')
    console.log('  - if (!session?.user?.id) return 401')
    console.log('  - Se chegou at√© aqui, problema √© na l√≥gica de filtro')

    // 8. Verificar se h√° problema com o frontend
    console.log('\n8Ô∏è‚É£ VERIFICANDO PROBLEMA COM FRONTEND...')
    
    console.log('üîç Poss√≠veis problemas no frontend:')
    console.log('  1. Cookies de sess√£o n√£o est√£o sendo enviados')
    console.log('  2. Sess√£o n√£o est√° sendo criada no login')
    console.log('  3. Sess√£o est√° sendo criada mas n√£o persistindo')
    console.log('  4. Problema com CORS ou headers')

    // 9. Verificar se h√° problema com o deploy
    console.log('\n9Ô∏è‚É£ VERIFICANDO PROBLEMA COM DEPLOY...')
    
    console.log('üîç Poss√≠veis problemas no deploy:')
    console.log('  1. Vari√°veis de ambiente n√£o configuradas no Vercel')
    console.log('  2. Build n√£o est√° incluindo as mudan√ßas')
    console.log('  3. Cache do Vercel est√° servindo vers√£o antiga')
    console.log('  4. Problema com dom√≠nio ou SSL')

    // 10. Diagn√≥stico final
    console.log('\nüîü DIAGN√ìSTICO FINAL...')
    
    console.log('üìä RESUMO DA INVESTIGA√á√ÉO:')
    console.log('‚úÖ Supabase funcionando')
    console.log('‚úÖ Usu√°rio existe e est√° ativo')
    console.log('‚úÖ Sess√µes podem ser criadas no banco')
    console.log('‚ùå APIs do dashboard retornam 401')
    console.log('‚ùå Bypass tempor√°rio n√£o funcionou')
    
    console.log('\nüéØ POSS√çVEIS CAUSAS:')
    console.log('1. Problema com cookies de sess√£o')
    console.log('2. Problema com configura√ß√£o do NextAuth')
    console.log('3. Problema com deploy no Vercel')
    console.log('4. Problema com vari√°veis de ambiente')
    console.log('5. Problema com CORS ou headers')
    
    console.log('\nüîß PR√ìXIMOS PASSOS:')
    console.log('1. Verificar se cookies est√£o sendo enviados')
    console.log('2. Verificar configura√ß√£o do NextAuth no Vercel')
    console.log('3. Verificar se build est√° atualizado')
    console.log('4. Testar com bypass mais agressivo')

  } catch (error) {
    console.error('‚ùå Erro geral:', error)
  }
}

deepAuthInvestigation()
