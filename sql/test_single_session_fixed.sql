-- ====================================================================
-- TESTE DO SISTEMA DE SESS√ÉO √öNICA (VERS√ÉO CORRIGIDA)
-- ====================================================================

-- Limpar dados de teste anteriores
DELETE FROM public.sessions WHERE "sessionToken" LIKE 'TEST_%';

-- Criar um usu√°rio de teste tempor√°rio
DO $$
DECLARE
    test_user_id UUID := 'a1b2c3d4-e5f6-7890-abcd-ef1234567890';
    session1_id TEXT := gen_random_uuid()::text;
    session2_id TEXT := gen_random_uuid()::text;
    session3_id TEXT := gen_random_uuid()::text;
BEGIN
    -- Limpar sess√µes antigas do usu√°rio teste
    DELETE FROM public.sessions WHERE "userId" = test_user_id;
    
    RAISE NOTICE '=== INICIANDO TESTE DO TRIGGER DE SESS√ÉO √öNICA ===';
    RAISE NOTICE '';
    
    -- TESTE 1: Criar primeira sess√£o
    RAISE NOTICE '1Ô∏è‚É£ Criando PRIMEIRA sess√£o para o usu√°rio...';
    INSERT INTO public.sessions (id, "sessionToken", "userId", expires)
    VALUES (session1_id, 'TEST_SESSION_1', test_user_id, NOW() + INTERVAL '1 day');
    
    RAISE NOTICE '‚úÖ Sess√µes ativas: %', 
        (SELECT COUNT(*) FROM public.sessions WHERE "userId" = test_user_id AND expires > NOW());
    RAISE NOTICE '';
    
    -- Pequena pausa
    PERFORM pg_sleep(1);
    
    -- TESTE 2: Criar segunda sess√£o (deve invalidar a primeira)
    RAISE NOTICE '2Ô∏è‚É£ Criando SEGUNDA sess√£o para o mesmo usu√°rio...';
    INSERT INTO public.sessions (id, "sessionToken", "userId", expires)
    VALUES (session2_id, 'TEST_SESSION_2', test_user_id, NOW() + INTERVAL '1 day');
    
    RAISE NOTICE '‚úÖ Sess√µes ativas: %', 
        (SELECT COUNT(*) FROM public.sessions WHERE "userId" = test_user_id AND expires > NOW());
    RAISE NOTICE 'üìä Status da primeira sess√£o: %',
        (SELECT CASE 
            WHEN expires > NOW() THEN 'ATIVA ‚ùå (ERRO - deveria estar expirada!)' 
            ELSE 'EXPIRADA ‚úÖ (Correto!)' 
        END 
        FROM public.sessions WHERE id = session1_id);
    RAISE NOTICE '';
    
    -- Pequena pausa
    PERFORM pg_sleep(1);
    
    -- TESTE 3: Criar terceira sess√£o (deve invalidar a segunda)
    RAISE NOTICE '3Ô∏è‚É£ Criando TERCEIRA sess√£o para o mesmo usu√°rio...';
    INSERT INTO public.sessions (id, "sessionToken", "userId", expires)
    VALUES (session3_id, 'TEST_SESSION_3', test_user_id, NOW() + INTERVAL '1 day');
    
    RAISE NOTICE '‚úÖ Sess√µes ativas: %', 
        (SELECT COUNT(*) FROM public.sessions WHERE "userId" = test_user_id AND expires > NOW());
    RAISE NOTICE 'üìä Status da segunda sess√£o: %',
        (SELECT CASE 
            WHEN expires > NOW() THEN 'ATIVA ‚ùå (ERRO - deveria estar expirada!)' 
            ELSE 'EXPIRADA ‚úÖ (Correto!)' 
        END 
        FROM public.sessions WHERE id = session2_id);
    RAISE NOTICE '';
    
    -- RESULTADO FINAL
    RAISE NOTICE '=== RESULTADO FINAL DO TESTE ===';
    IF (SELECT COUNT(*) FROM public.sessions WHERE "userId" = test_user_id AND expires > NOW()) = 1 THEN
        RAISE NOTICE '‚úÖ‚úÖ‚úÖ SUCESSO! Sistema de sess√£o √∫nica est√° funcionando corretamente!';
        RAISE NOTICE 'Apenas 1 sess√£o ativa por usu√°rio, como esperado.';
    ELSE
        RAISE NOTICE '‚ùå‚ùå‚ùå ERRO! Sistema n√£o est√° funcionando corretamente!';
        RAISE NOTICE 'M√∫ltiplas sess√µes ativas encontradas para o mesmo usu√°rio.';
    END IF;
    
    -- Mostrar detalhes das sess√µes
    RAISE NOTICE '';
    RAISE NOTICE 'üìã Detalhes das sess√µes de teste:';
    FOR session1_id IN 
        SELECT id FROM public.sessions WHERE "userId" = test_user_id ORDER BY created_at
    LOOP
        RAISE NOTICE 'Sess√£o: % | Status: %',
            (SELECT "sessionToken" FROM public.sessions WHERE id = session1_id),
            (SELECT CASE WHEN expires > NOW() THEN 'ATIVA' ELSE 'EXPIRADA' END 
             FROM public.sessions WHERE id = session1_id);
    END LOOP;
    
    -- Limpar dados de teste
    RAISE NOTICE '';
    RAISE NOTICE 'üßπ Limpando dados de teste...';
    DELETE FROM public.sessions WHERE "userId" = test_user_id;
    RAISE NOTICE '‚úÖ Dados de teste removidos.';
    
END $$;

-- Verificar se o trigger existe
SELECT 
    CASE 
        WHEN EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'trigger_enforce_single_session')
        THEN E'\n‚úÖ TRIGGER CONFIRMADO: trigger_enforce_single_session est√° instalado e ativo!'
        ELSE E'\n‚ùå TRIGGER N√ÉO ENCONTRADO: Execute o script create_single_session_system.sql primeiro!'
    END as status;