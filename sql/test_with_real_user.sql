-- ====================================================================
-- TESTE DO SISTEMA DE SESS√ÉO √öNICA COM USU√ÅRIO REAL
-- ====================================================================

-- Primeiro, vamos verificar quais usu√°rios existem no sistema
SELECT id, email, name FROM public.users LIMIT 5;

-- Agora vamos fazer o teste com um usu√°rio real
DO $$
DECLARE
    test_user_id UUID;
    test_user_email TEXT;
    session1_id TEXT := gen_random_uuid()::text;
    session2_id TEXT := gen_random_uuid()::text;
    session3_id TEXT := gen_random_uuid()::text;
BEGIN
    -- Pegar o ID de um usu√°rio real (preferencialmente o seu)
    SELECT id, email INTO test_user_id, test_user_email
    FROM public.users 
    WHERE email = 'rodrigues2205@icloud.com'
    LIMIT 1;
    
    -- Se n√£o encontrar, pegar qualquer usu√°rio
    IF test_user_id IS NULL THEN
        SELECT id, email INTO test_user_id, test_user_email
        FROM public.users 
        LIMIT 1;
    END IF;
    
    -- Se ainda n√£o tiver usu√°rio, criar um tempor√°rio
    IF test_user_id IS NULL THEN
        test_user_id := gen_random_uuid();
        INSERT INTO public.users (id, email, name, created_at)
        VALUES (test_user_id, 'teste@example.com', 'Usu√°rio Teste', NOW());
        test_user_email := 'teste@example.com';
    END IF;
    
    RAISE NOTICE '=== TESTE DE SESS√ÉO √öNICA ===';
    RAISE NOTICE 'Testando com usu√°rio: % (%)', test_user_email, test_user_id;
    RAISE NOTICE '';
    
    -- Limpar sess√µes antigas deste usu√°rio
    DELETE FROM public.sessions WHERE "userId" = test_user_id;
    
    -- TESTE 1: Criar primeira sess√£o
    RAISE NOTICE '1Ô∏è‚É£ Criando PRIMEIRA sess√£o...';
    INSERT INTO public.sessions (id, "sessionToken", "userId", expires)
    VALUES (session1_id, 'TEST_SESSION_1_' || NOW()::text, test_user_id, NOW() + INTERVAL '1 day');
    
    RAISE NOTICE '‚úÖ Sess√µes ativas: %', 
        (SELECT COUNT(*) FROM public.sessions WHERE "userId" = test_user_id AND expires > NOW());
    
    -- Pausa
    PERFORM pg_sleep(1);
    
    -- TESTE 2: Criar segunda sess√£o (deve invalidar a primeira)
    RAISE NOTICE '';
    RAISE NOTICE '2Ô∏è‚É£ Criando SEGUNDA sess√£o (deve invalidar a primeira)...';
    INSERT INTO public.sessions (id, "sessionToken", "userId", expires)
    VALUES (session2_id, 'TEST_SESSION_2_' || NOW()::text, test_user_id, NOW() + INTERVAL '1 day');
    
    RAISE NOTICE '‚úÖ Sess√µes ativas: %', 
        (SELECT COUNT(*) FROM public.sessions WHERE "userId" = test_user_id AND expires > NOW());
    
    -- Verificar se a primeira foi invalidada
    RAISE NOTICE 'üìä Primeira sess√£o foi expirada? %',
        (SELECT CASE 
            WHEN expires <= NOW() THEN 'SIM ‚úÖ' 
            ELSE 'N√ÉO ‚ùå' 
        END 
        FROM public.sessions WHERE id = session1_id);
    
    -- Pausa
    PERFORM pg_sleep(1);
    
    -- TESTE 3: Criar terceira sess√£o
    RAISE NOTICE '';
    RAISE NOTICE '3Ô∏è‚É£ Criando TERCEIRA sess√£o (deve invalidar a segunda)...';
    INSERT INTO public.sessions (id, "sessionToken", "userId", expires)
    VALUES (session3_id, 'TEST_SESSION_3_' || NOW()::text, test_user_id, NOW() + INTERVAL '1 day');
    
    RAISE NOTICE '‚úÖ Sess√µes ativas: %', 
        (SELECT COUNT(*) FROM public.sessions WHERE "userId" = test_user_id AND expires > NOW());
    
    -- Verificar se a segunda foi invalidada
    RAISE NOTICE 'üìä Segunda sess√£o foi expirada? %',
        (SELECT CASE 
            WHEN expires <= NOW() THEN 'SIM ‚úÖ' 
            ELSE 'N√ÉO ‚ùå' 
        END 
        FROM public.sessions WHERE id = session2_id);
    
    -- RESULTADO FINAL
    RAISE NOTICE '';
    RAISE NOTICE '=== RESULTADO FINAL ===';
    IF (SELECT COUNT(*) FROM public.sessions WHERE "userId" = test_user_id AND expires > NOW()) = 1 THEN
        RAISE NOTICE '‚úÖ‚úÖ‚úÖ SUCESSO! Sistema funcionando!';
        RAISE NOTICE 'Apenas 1 sess√£o ativa, como esperado.';
        RAISE NOTICE '';
        RAISE NOTICE 'üéØ ISSO SIGNIFICA QUE:';
        RAISE NOTICE '- Quando voc√™ fizer login em um novo dispositivo';
        RAISE NOTICE '- O login anterior ser√° automaticamente desconectado';
        RAISE NOTICE '- Garantindo apenas 1 sess√£o ativa por vez!';
    ELSE
        RAISE NOTICE '‚ùå PROBLEMA DETECTADO!';
        RAISE NOTICE 'Encontradas % sess√µes ativas para o mesmo usu√°rio.',
            (SELECT COUNT(*) FROM public.sessions WHERE "userId" = test_user_id AND expires > NOW());
        RAISE NOTICE 'O trigger pode n√£o estar funcionando corretamente.';
    END IF;
    
    -- Limpar dados de teste
    RAISE NOTICE '';
    RAISE NOTICE 'üßπ Limpando sess√µes de teste...';
    DELETE FROM public.sessions WHERE "userId" = test_user_id AND "sessionToken" LIKE 'TEST_%';
    
    -- Se criamos um usu√°rio teste, remover
    IF test_user_email = 'teste@example.com' THEN
        DELETE FROM public.users WHERE id = test_user_id;
    END IF;
    
    RAISE NOTICE '‚úÖ Teste conclu√≠do!';
    
END $$;

-- Verificar trigger
SELECT 
    'TRIGGER STATUS' as info,
    tgname as trigger_name,
    tgenabled as enabled,
    CASE 
        WHEN tgenabled = 'O' THEN '‚úÖ Ativo'
        WHEN tgenabled = 'D' THEN '‚ùå Desativado'
        ELSE '‚ö†Ô∏è Status desconhecido'
    END as status
FROM pg_trigger 
WHERE tgname = 'trigger_enforce_single_session';