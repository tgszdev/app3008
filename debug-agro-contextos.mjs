import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

dotenv.config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o encontradas')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function debugAgroContextos() {
  console.log('üîç DEBUG USU√ÅRIO AGRO - CONTEXTOS')
  console.log('=' .repeat(60))

  try {
    // 1. Verificar usu√°rio agro
    console.log('\n1Ô∏è‚É£ VERIFICANDO USU√ÅRIO AGRO...')
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('email', 'agro@agro.com.br')
      .single()

    if (userError) {
      console.error('‚ùå Erro ao buscar usu√°rio:', userError)
      return
    }

    console.log('‚úÖ Usu√°rio encontrado:', {
      id: user.id,
      email: user.email,
      user_type: user.user_type,
      context_id: user.context_id,
      role: user.role
    })

    // 2. Verificar contextos associados
    console.log('\n2Ô∏è‚É£ VERIFICANDO CONTEXTOS ASSOCIADOS...')
    const { data: userContexts, error: contextsError } = await supabase
      .from('user_contexts')
      .select(`
        *,
        contexts(id, name, slug, type, is_active)
      `)
      .eq('user_id', user.id)

    if (contextsError) {
      console.error('‚ùå Erro ao buscar contextos:', contextsError)
      return
    }

    console.log('‚úÖ Contextos associados:', userContexts.length)
    userContexts.forEach(uc => {
      console.log(`  - ${uc.contexts.name} (${uc.contexts.slug}) - Tipo: ${uc.contexts.type} - Ativo: ${uc.contexts.is_active}`)
    })

    // 3. Verificar categorias espec√≠ficas de cada contexto
    console.log('\n3Ô∏è‚É£ VERIFICANDO CATEGORIAS POR CONTEXTO...')
    for (const uc of userContexts) {
      console.log(`\nüìã Contexto: ${uc.contexts.name}`)
      
      const { data: categories, error: categoriesError } = await supabase
        .from('categories')
        .select('*')
        .eq('context_id', uc.context_id)
        .eq('is_global', false)
        .eq('is_active', true)

      if (categoriesError) {
        console.error('‚ùå Erro ao buscar categorias:', categoriesError)
        continue
      }

      console.log(`  ‚úÖ Categorias espec√≠ficas: ${categories.length}`)
      categories.forEach(cat => {
        console.log(`    - ${cat.name} (${cat.slug})`)
      })
    }

    // 4. Verificar categorias globais
    console.log('\n4Ô∏è‚É£ VERIFICANDO CATEGORIAS GLOBAIS...')
    const { data: globalCategories, error: globalError } = await supabase
      .from('categories')
      .select('*')
      .eq('is_global', true)
      .eq('is_active', true)

    if (globalError) {
      console.error('‚ùå Erro ao buscar categorias globais:', globalError)
      return
    }

    console.log('‚úÖ Categorias globais:', globalCategories.length)
    globalCategories.forEach(cat => {
      console.log(`  - ${cat.name} (${cat.slug})`)
    })

    // 5. Testar JWT com categorias (simulando API)
    console.log('\n5Ô∏è‚É£ TESTANDO JWT COM CATEGORIAS...')
    const jwt = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
    const supabaseAuth = createClient(supabaseUrl, jwt)
    
    // Buscar usu√°rio com JWT
    const { data: userAuth, error: userAuthError } = await supabaseAuth
      .from('users')
      .select('*')
      .eq('email', 'agro@agro.com.br')
      .single()

    if (userAuthError) {
      console.log('‚ùå RLS bloqueando acesso ao usu√°rio:', userAuthError.message)
    } else {
      console.log('‚úÖ Usu√°rio acess√≠vel com JWT:', userAuth.email)
      console.log('‚úÖ Tipo de usu√°rio:', userAuth.user_type)
    }

    // Buscar categorias com JWT baseado no tipo de usu√°rio
    let authCategories = []
    if (userAuth?.user_type === 'matrix') {
      // Usu√°rio matrix: buscar categorias de todos os contextos
      const contextIds = userContexts.map(uc => uc.context_id)
      const { data: matrixCategories, error: matrixError } = await supabaseAuth
        .from('categories')
        .select('*')
        .or(`is_global.eq.true,context_id.in.(${contextIds.join(',')})`)
        .eq('is_active', true)

      if (matrixError) {
        console.log('‚ùå RLS bloqueando acesso √†s categorias matrix:', matrixError.message)
      } else {
        authCategories = matrixCategories || []
        console.log('‚úÖ Categorias matrix com JWT:', authCategories.length)
      }
    } else if (userAuth?.user_type === 'context' && userAuth.context_id) {
      // Usu√°rio context: buscar categorias globais + do seu contexto
      const { data: contextCategories, error: contextError } = await supabaseAuth
        .from('categories')
        .select('*')
        .or(`is_global.eq.true,context_id.eq.${userAuth.context_id}`)
        .eq('is_active', true)

      if (contextError) {
        console.log('‚ùå RLS bloqueando acesso √†s categorias context:', contextError.message)
      } else {
        authCategories = contextCategories || []
        console.log('‚úÖ Categorias context com JWT:', authCategories.length)
      }
    }

    authCategories.forEach(cat => {
      console.log(`  - ${cat.name} (${cat.slug}) - Global: ${cat.is_global}`)
    })

    console.log('\nüéØ DEBUG USU√ÅRIO AGRO CONCLU√çDO!')
    console.log('=' .repeat(60))
    console.log('üìã RESUMO:')
    console.log(`- Usu√°rio encontrado: ${user ? '‚úÖ' : '‚ùå'}`)
    console.log(`- Tipo de usu√°rio: ${user.user_type}`)
    console.log(`- Contextos associados: ${userContexts.length}`)
    console.log(`- Categorias globais: ${globalCategories.length}`)
    console.log(`- Usu√°rio com JWT: ${userAuth ? '‚úÖ' : '‚ùå'}`)
    console.log(`- Categorias com JWT: ${authCategories.length}`)

    // 6. Verificar se o usu√°rio foi alterado para matrix
    if (user.user_type === 'context') {
      console.log('\n‚ö†Ô∏è PROBLEMA IDENTIFICADO:')
      console.log('O usu√°rio agro √© do tipo "context" mas tem m√∫ltiplos contextos associados!')
      console.log('Para ver todas as categorias, ele deveria ser do tipo "matrix"')
    }

  } catch (error) {
    console.error('‚ùå Erro geral:', error)
  }
}

debugAgroContextos()
