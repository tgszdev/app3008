#!/usr/bin/env node

import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

dotenv.config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o encontradas')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function analyzeCategoriesSystem() {
  console.log('üîç AN√ÅLISE COMPLETA: SISTEMA DE CATEGORIAS')
  console.log('=' .repeat(60))

  try {
    // 1. Analisar estrutura atual do banco
    console.log('\n1Ô∏è‚É£ ESTRUTURA DO BANCO DE DADOS...')
    
    // Verificar tabela users
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('id, email, user_type, context_id, role, is_active')
      .limit(5)

    if (usersError) {
      console.error('‚ùå Erro ao buscar usu√°rios:', usersError)
    } else {
      console.log('‚úÖ Tabela users:')
      console.log('  - Campos: id, email, user_type, context_id, role, is_active')
      console.log('  - Tipos de usu√°rio encontrados:', [...new Set(users.map(u => u.user_type))])
    }

    // Verificar tabela contexts
    const { data: contexts, error: contextsError } = await supabase
      .from('contexts')
      .select('id, name, type, slug, is_active')
      .limit(5)

    if (contextsError) {
      console.error('‚ùå Erro ao buscar contextos:', contextsError)
    } else {
      console.log('‚úÖ Tabela contexts:')
      console.log('  - Campos: id, name, type, slug, is_active')
      console.log('  - Tipos encontrados:', [...new Set(contexts.map(c => c.type))])
    }

    // Verificar tabela categories
    const { data: categories, error: categoriesError } = await supabase
      .from('categories')
      .select('id, name, context_id, is_global, is_active')
      .limit(5)

    if (categoriesError) {
      console.error('‚ùå Erro ao buscar categorias:', categoriesError)
    } else {
      console.log('‚úÖ Tabela categories:')
      console.log('  - Campos: id, name, context_id, is_global, is_active')
      console.log('  - Categorias globais:', categories.filter(c => c.is_global).length)
      console.log('  - Categorias espec√≠ficas:', categories.filter(c => !c.is_global).length)
    }

    // 2. Verificar se existe sistema de m√∫ltiplas organiza√ß√µes
    console.log('\n2Ô∏è‚É£ SISTEMA DE M√öLTIPLAS ORGANIZA√á√ïES...')
    
    // Verificar tabela user_contexts
    const { data: userContexts, error: userContextsError } = await supabase
      .from('user_contexts')
      .select('*')
      .limit(5)

    if (userContextsError) {
      console.log('‚ùå Tabela user_contexts n√£o existe:', userContextsError.message)
    } else {
      console.log('‚úÖ Tabela user_contexts existe:', userContexts.length, 'associa√ß√µes')
    }

    // Verificar tabela user_organizations
    const { data: userOrgs, error: userOrgsError } = await supabase
      .from('user_organizations')
      .select('*')
      .limit(5)

    if (userOrgsError) {
      console.log('‚ùå Tabela user_organizations n√£o existe:', userOrgsError.message)
    } else {
      console.log('‚úÖ Tabela user_organizations existe:', userOrgs.length, 'associa√ß√µes')
    }

    // 3. Analisar regras de neg√≥cio atuais
    console.log('\n3Ô∏è‚É£ REGRAS DE NEG√ìCIO ATUAIS...')
    
    // Usu√°rios context
    const { data: contextUsers, error: contextUsersError } = await supabase
      .from('users')
      .select('*')
      .eq('user_type', 'context')

    if (contextUsersError) {
      console.error('‚ùå Erro ao buscar usu√°rios context:', contextUsersError)
    } else {
      console.log('‚úÖ Usu√°rios context:', contextUsers.length)
      contextUsers.forEach(user => {
        console.log(`  - ${user.email}: contexto ${user.context_id || 'null'}`)
      })
    }

    // Usu√°rios matrix
    const { data: matrixUsers, error: matrixUsersError } = await supabase
      .from('users')
      .select('*')
      .eq('user_type', 'matrix')

    if (matrixUsersError) {
      console.error('‚ùå Erro ao buscar usu√°rios matrix:', matrixUsersError)
    } else {
      console.log('‚úÖ Usu√°rios matrix:', matrixUsers.length)
      matrixUsers.forEach(user => {
        console.log(`  - ${user.email}: contexto ${user.context_id || 'null'}`)
      })
    }

    // 4. Analisar problemas atuais
    console.log('\n4Ô∏è‚É£ PROBLEMAS IDENTIFICADOS...')
    
    console.log('‚ùå PROBLEMA 1: API hardcoded')
    console.log('  - Endpoint /api/categories/public est√° hardcoded para Luft Agro')
    console.log('  - N√£o considera tipo de usu√°rio (context vs matrix)')
    console.log('  - N√£o considera m√∫ltiplas organiza√ß√µes')
    
    console.log('‚ùå PROBLEMA 2: Falta de autentica√ß√£o real')
    console.log('  - API p√∫blica n√£o recebe informa√ß√µes do usu√°rio')
    console.log('  - N√£o h√° como saber qual usu√°rio est√° fazendo a requisi√ß√£o')
    console.log('  - N√£o h√° como aplicar regras espec√≠ficas por usu√°rio')
    
    console.log('‚ùå PROBLEMA 3: Sistema de m√∫ltiplas organiza√ß√µes incompleto')
    console.log('  - Tabela user_contexts pode n√£o existir')
    console.log('  - N√£o h√° l√≥gica para associar usu√°rios a m√∫ltiplos contextos')
    console.log('  - N√£o h√° l√≥gica para filtrar categorias por m√∫ltiplos contextos')

    // 5. Propor solu√ß√£o din√¢mica
    console.log('\n5Ô∏è‚É£ SOLU√á√ÉO DIN√ÇMICA PROPOSTA...')
    
    console.log('üîß SOLU√á√ÉO 1: Implementar autentica√ß√£o real na API')
    console.log('  - Usar NextAuth para obter usu√°rio autenticado')
    console.log('  - Aplicar regras baseadas no user_type do usu√°rio')
    console.log('  - Filtrar categorias dinamicamente por contexto')
    
    console.log('üîß SOLU√á√ÉO 2: Implementar sistema de m√∫ltiplas organiza√ß√µes')
    console.log('  - Criar tabela user_contexts se n√£o existir')
    console.log('  - Associar usu√°rios matrix a m√∫ltiplos contextos')
    console.log('  - Implementar l√≥gica para buscar contextos do usu√°rio')
    
    console.log('üîß SOLU√á√ÉO 3: Implementar l√≥gica din√¢mica de filtros')
    console.log('  - Usu√°rios context: categorias globais + do seu contexto')
    console.log('  - Usu√°rios matrix: categorias globais + de todos os contextos associados')
    console.log('  - Aplicar filtros dinamicamente baseados no usu√°rio')

    // 6. Verificar se h√° categorias globais
    console.log('\n6Ô∏è‚É£ VERIFICANDO CATEGORIAS GLOBAIS...')
    const { data: globalCats, error: globalCatsError } = await supabase
      .from('categories')
      .select('*')
      .eq('is_global', true)
      .eq('is_active', true)

    if (globalCatsError) {
      console.error('‚ùå Erro ao buscar categorias globais:', globalCatsError)
    } else {
      console.log('‚úÖ Categorias globais:', globalCats.length)
      if (globalCats.length === 0) {
        console.log('‚ö†Ô∏è ATEN√á√ÉO: N√£o h√° categorias globais!')
        console.log('üîß SOLU√á√ÉO: Criar pelo menos uma categoria global para fallback')
      }
    }

    // 7. Verificar distribui√ß√£o de categorias por contexto
    console.log('\n7Ô∏è‚É£ DISTRIBUI√á√ÉO DE CATEGORIAS POR CONTEXTO...')
    const { data: allContexts, error: allContextsError } = await supabase
      .from('contexts')
      .select('id, name, type')
      .eq('is_active', true)

    if (allContextsError) {
      console.error('‚ùå Erro ao buscar contextos:', allContextsError)
    } else {
      for (const context of allContexts) {
        const { data: contextCats, error: contextCatsError } = await supabase
          .from('categories')
          .select('id, name')
          .eq('context_id', context.id)
          .eq('is_active', true)

        if (contextCatsError) {
          console.log(`‚ùå Erro ao buscar categorias de ${context.name}:`, contextCatsError.message)
        } else {
          console.log(`‚úÖ ${context.name}: ${contextCats.length} categorias`)
        }
      }
    }

    // 8. Diagn√≥stico final
    console.log('\n8Ô∏è‚É£ DIAGN√ìSTICO FINAL...')
    console.log('üìä RESUMO DA AN√ÅLISE:')
    console.log(`  - Usu√°rios context: ${contextUsers?.length || 0}`)
    console.log(`  - Usu√°rios matrix: ${matrixUsers?.length || 0}`)
    console.log(`  - Contextos ativos: ${allContexts?.length || 0}`)
    console.log(`  - Categorias globais: ${globalCats?.length || 0}`)
    console.log(`  - Sistema user_contexts: ${userContexts ? '‚úÖ' : '‚ùå'}`)
    console.log(`  - Sistema user_organizations: ${userOrgs ? '‚úÖ' : '‚ùå'}`)

    console.log('\nüéØ PR√ìXIMOS PASSOS:')
    console.log('1. Implementar autentica√ß√£o real na API de categorias')
    console.log('2. Criar sistema de m√∫ltiplas organiza√ß√µes se necess√°rio')
    console.log('3. Implementar l√≥gica din√¢mica de filtros')
    console.log('4. Remover todo hardcoding')
    console.log('5. Testar com diferentes tipos de usu√°rio')

  } catch (error) {
    console.error('‚ùå Erro geral:', error)
  }
}

analyzeCategoriesSystem()
