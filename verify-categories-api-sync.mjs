#!/usr/bin/env node

import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

dotenv.config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o encontradas')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function verifyCategoriesApiSync() {
  console.log('üîç VERIFICANDO SINCRONIZA√á√ÉO API DE CATEGORIAS ‚Üí BANCO')
  console.log('=' .repeat(70))

  try {
    // 1. Verificar todas as categorias no banco
    console.log('\n1Ô∏è‚É£ CATEGORIAS NO BANCO DE DADOS...')
    
    const { data: allCategories, error: allCategoriesError } = await supabase
      .from('categories')
      .select('*')
      .order('display_order')

    if (allCategoriesError) {
      console.log('‚ùå Erro ao buscar categorias:', allCategoriesError.message)
      return
    }

    console.log('‚úÖ Categorias encontradas no banco:', allCategories.length)
    
    // Separar por tipo
    const globalCats = allCategories.filter(cat => cat.is_global)
    const specificCats = allCategories.filter(cat => !cat.is_global)
    const activeCats = allCategories.filter(cat => cat.is_active)
    const inactiveCats = allCategories.filter(cat => !cat.is_active)

    console.log('üìä Distribui√ß√£o:')
    console.log(`  - Globais: ${globalCats.length}`)
    console.log(`  - Espec√≠ficas: ${specificCats.length}`)
    console.log(`  - Ativas: ${activeCats.length}`)
    console.log(`  - Inativas: ${inactiveCats.length}`)

    // 2. Verificar categorias globais
    console.log('\n2Ô∏è‚É£ CATEGORIAS GLOBAIS...')
    if (globalCats.length > 0) {
      globalCats.forEach(cat => {
        console.log(`  - ${cat.name}: ${cat.is_active ? 'Ativa' : 'Inativa'} (context: ${cat.context_id || 'null'})`)
      })
    } else {
      console.log('‚ö†Ô∏è Nenhuma categoria global encontrada!')
    }

    // 3. Verificar categorias espec√≠ficas por contexto
    console.log('\n3Ô∏è‚É£ CATEGORIAS ESPEC√çFICAS POR CONTEXTO...')
    
    // Agrupar por contexto
    const contextGroups = {}
    specificCats.forEach(cat => {
      const contextId = cat.context_id || 'null'
      if (!contextGroups[contextId]) {
        contextGroups[contextId] = []
      }
      contextGroups[contextId].push(cat)
    })

    Object.entries(contextGroups).forEach(([contextId, cats]) => {
      console.log(`\n  Contexto ${contextId}:`)
      cats.forEach(cat => {
        console.log(`    - ${cat.name}: ${cat.is_active ? 'Ativa' : 'Inativa'}`)
      })
    })

    // 4. Verificar contextos existentes
    console.log('\n4Ô∏è‚É£ CONTEXTOS EXISTENTES...')
    
    const { data: contexts, error: contextsError } = await supabase
      .from('contexts')
      .select('*')
      .eq('is_active', true)
      .order('name')

    if (contextsError) {
      console.log('‚ùå Erro ao buscar contextos:', contextsError.message)
    } else {
      console.log('‚úÖ Contextos ativos:', contexts.length)
      contexts.forEach(ctx => {
        console.log(`  - ${ctx.name}: ${ctx.type} (${ctx.id})`)
      })
    }

    // 5. Verificar se h√° categorias √≥rf√£s (sem contexto v√°lido)
    console.log('\n5Ô∏è‚É£ VERIFICANDO CATEGORIAS √ìRF√ÉS...')
    
    const orphanCats = specificCats.filter(cat => {
      if (!cat.context_id) return true
      return !contexts.some(ctx => ctx.id === cat.context_id)
    })

    if (orphanCats.length > 0) {
      console.log('‚ùå Categorias √≥rf√£s encontradas:', orphanCats.length)
      orphanCats.forEach(cat => {
        console.log(`  - ${cat.name}: context_id ${cat.context_id} (contexto n√£o existe)`)
      })
    } else {
      console.log('‚úÖ Nenhuma categoria √≥rf√£ encontrada')
    }

    // 6. Testar API de categorias
    console.log('\n6Ô∏è‚É£ TESTANDO API DE CATEGORIAS...')
    
    try {
      // Testar API p√∫blica
      console.log('üì° Testando API p√∫blica...')
      const publicResponse = await fetch('https://www.ithostbr.tech/api/categories/public?active_only=true')
      const publicData = await publicResponse.json()
      
      if (publicResponse.ok) {
        console.log('‚úÖ API p√∫blica funcionando:', publicData.length, 'categorias')
        
        // Verificar se retorna todas as categorias ativas
        const activeCatsFromApi = publicData.filter(cat => cat.is_active)
        console.log(`  - Categorias ativas na API: ${activeCatsFromApi.length}`)
        console.log(`  - Categorias ativas no banco: ${activeCats.length}`)
        
        if (activeCatsFromApi.length === activeCats.length) {
          console.log('‚úÖ API p√∫blica sincronizada com banco')
        } else {
          console.log('‚ùå API p√∫blica n√£o est√° sincronizada com banco')
        }
      } else {
        console.log('‚ùå API p√∫blica com erro:', publicResponse.status, publicData)
      }

      // Testar API din√¢mica
      console.log('\nüì° Testando API din√¢mica...')
      const dynamicResponse = await fetch('https://www.ithostbr.tech/api/categories/dynamic?active_only=true')
      const dynamicData = await dynamicResponse.json()
      
      if (dynamicResponse.ok) {
        console.log('‚úÖ API din√¢mica funcionando:', dynamicData.length, 'categorias')
        
        // Verificar se filtra corretamente
        const globalCatsFromApi = dynamicData.filter(cat => cat.is_global)
        const specificCatsFromApi = dynamicData.filter(cat => !cat.is_global)
        
        console.log(`  - Categorias globais na API: ${globalCatsFromApi.length}`)
        console.log(`  - Categorias espec√≠ficas na API: ${specificCatsFromApi.length}`)
      } else {
        console.log('‚ùå API din√¢mica com erro:', dynamicResponse.status, dynamicData)
      }

    } catch (error) {
      console.log('‚ùå Erro ao testar APIs:', error.message)
    }

    // 7. Verificar opera√ß√µes recentes
    console.log('\n7Ô∏è‚É£ VERIFICANDO OPERA√á√ïES RECENTES...')
    
    // Buscar categorias criadas recentemente
    const recentCats = allCategories.filter(cat => {
      const createdAt = new Date(cat.created_at)
      const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000)
      return createdAt > oneDayAgo
    })

    if (recentCats.length > 0) {
      console.log('‚úÖ Categorias criadas nas √∫ltimas 24h:', recentCats.length)
      recentCats.forEach(cat => {
        console.log(`  - ${cat.name}: ${cat.is_global ? 'Global' : 'Espec√≠fica'} (${cat.created_at})`)
      })
    } else {
      console.log('‚ÑπÔ∏è Nenhuma categoria criada nas √∫ltimas 24h')
    }

    // 8. Verificar integridade dos dados
    console.log('\n8Ô∏è‚É£ VERIFICANDO INTEGRIDADE DOS DADOS...')
    
    const issues = []
    
    // Verificar se h√° categorias sem nome
    const catsWithoutName = allCategories.filter(cat => !cat.name || cat.name.trim() === '')
    if (catsWithoutName.length > 0) {
      issues.push(`‚ùå ${catsWithoutName.length} categorias sem nome`)
    }
    
    // Verificar se h√° categorias sem slug
    const catsWithoutSlug = allCategories.filter(cat => !cat.slug || cat.slug.trim() === '')
    if (catsWithoutSlug.length > 0) {
      issues.push(`‚ùå ${catsWithoutSlug.length} categorias sem slug`)
    }
    
    // Verificar se h√° categorias espec√≠ficas sem contexto
    const specificCatsWithoutContext = specificCats.filter(cat => !cat.context_id)
    if (specificCatsWithoutContext.length > 0) {
      issues.push(`‚ùå ${specificCatsWithoutContext.length} categorias espec√≠ficas sem contexto`)
    }
    
    // Verificar se h√° categorias globais com contexto
    const globalCatsWithContext = globalCats.filter(cat => cat.context_id)
    if (globalCatsWithContext.length > 0) {
      issues.push(`‚ùå ${globalCatsWithContext.length} categorias globais com contexto`)
    }

    if (issues.length > 0) {
      console.log('üö® PROBLEMAS DE INTEGRIDADE:')
      issues.forEach(issue => console.log(`  ${issue}`))
    } else {
      console.log('‚úÖ Dados √≠ntegros')
    }

    // 9. Diagn√≥stico final
    console.log('\n9Ô∏è‚É£ DIAGN√ìSTICO FINAL...')
    
    console.log('üìä RESUMO:')
    console.log(`  - Total de categorias: ${allCategories.length}`)
    console.log(`  - Categorias globais: ${globalCats.length}`)
    console.log(`  - Categorias espec√≠ficas: ${specificCats.length}`)
    console.log(`  - Categorias ativas: ${activeCats.length}`)
    console.log(`  - Categorias inativas: ${inactiveCats.length}`)
    console.log(`  - Contextos ativos: ${contexts?.length || 0}`)
    console.log(`  - Categorias √≥rf√£s: ${orphanCats.length}`)
    console.log(`  - Problemas de integridade: ${issues.length}`)

    if (issues.length === 0 && orphanCats.length === 0) {
      console.log('\n‚úÖ SINCRONIZA√á√ÉO PERFEITA!')
      console.log('A API de categorias est√° refletindo corretamente no banco de dados.')
    } else {
      console.log('\n‚ö†Ô∏è PROBLEMAS IDENTIFICADOS!')
      console.log('Verificar e corrigir os problemas listados acima.')
    }

  } catch (error) {
    console.error('‚ùå Erro geral:', error)
  }
}

verifyCategoriesApiSync()
