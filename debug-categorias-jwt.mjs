import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

dotenv.config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o encontradas')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function debugCategoriasJWT() {
  console.log('üîç DEBUG CATEGORIAS COM JWT')
  console.log('=' .repeat(50))

  try {
    // 1. Verificar usu√°rio agro
    console.log('\n1Ô∏è‚É£ VERIFICANDO USU√ÅRIO AGRO...')
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('email', 'agro@agro.com.br')
      .single()

    if (userError) {
      console.error('‚ùå Erro ao buscar usu√°rio:', userError)
      return
    }

    console.log('‚úÖ Usu√°rio encontrado:', user.email)
    console.log('‚úÖ Context ID:', user.context_id)

    // 2. Testar JWT
    console.log('\n2Ô∏è‚É£ TESTANDO JWT...')
    const jwt = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
    const supabaseAuth = createClient(supabaseUrl, jwt)
    
    // Verificar usu√°rio com JWT
    const { data: userAuth, error: userAuthError } = await supabaseAuth
      .from('users')
      .select('*')
      .eq('email', 'agro@agro.com.br')
      .single()

    if (userAuthError) {
      console.error('‚ùå Erro ao buscar usu√°rio com JWT:', userAuthError)
      return
    }

    console.log('‚úÖ Usu√°rio encontrado com JWT:', userAuth.email)
    console.log('‚úÖ Context ID do usu√°rio:', userAuth.context_id)

    // 3. Testar categorias globais com JWT
    console.log('\n3Ô∏è‚É£ TESTANDO CATEGORIAS GLOBAIS COM JWT...')
    const { data: globalCategories, error: globalError } = await supabaseAuth
      .from('categories')
      .select('*')
      .eq('is_global', true)

    if (globalError) {
      console.error('‚ùå Erro ao buscar categorias globais:', globalError)
    } else {
      console.log('‚úÖ Categorias globais encontradas:', globalCategories.length)
      globalCategories.forEach(cat => {
        console.log(`  - ${cat.name} (${cat.slug})`)
      })
    }

    // 4. Testar categorias espec√≠ficas com JWT
    console.log('\n4Ô∏è‚É£ TESTANDO CATEGORIAS ESPEC√çFICAS COM JWT...')
    const { data: specificCategories, error: specificError } = await supabaseAuth
      .from('categories')
      .select('*')
      .eq('context_id', userAuth.context_id)
      .eq('is_global', false)

    if (specificError) {
      console.error('‚ùå Erro ao buscar categorias espec√≠ficas:', specificError)
    } else {
      console.log('‚úÖ Categorias espec√≠ficas encontradas:', specificCategories.length)
      specificCategories.forEach(cat => {
        console.log(`  - ${cat.name} (${cat.slug})`)
      })
    }

    // 5. Testar query OR com JWT
    console.log('\n5Ô∏è‚É£ TESTANDO QUERY OR COM JWT...')
    const { data: orCategories, error: orError } = await supabaseAuth
      .from('categories')
      .select('*')
      .or(`context_id.eq.${userAuth.context_id},is_global.eq.true`)

    if (orError) {
      console.error('‚ùå Erro na query OR:', orError)
    } else {
      console.log('‚úÖ Query OR retornou:', orCategories.length, 'categorias')
      orCategories.forEach(cat => {
        console.log(`  - ${cat.name} (${cat.slug}) - Global: ${cat.is_global}`)
      })
    }

    // 6. Testar query com join com JWT
    console.log('\n6Ô∏è‚É£ TESTANDO QUERY COM JOIN COM JWT...')
    const { data: joinCategories, error: joinError } = await supabaseAuth
      .from('categories')
      .select(`
        *,
        contexts!inner(name, slug, type)
      `)
      .or(`context_id.eq.${userAuth.context_id},is_global.eq.true`)

    if (joinError) {
      console.error('‚ùå Erro na query com join:', joinError)
    } else {
      console.log('‚úÖ Query com join retornou:', joinCategories.length, 'categorias')
      joinCategories.forEach(cat => {
        console.log(`  - ${cat.name} (${cat.contexts?.name || 'Global'})`)
      })
    }

    // 7. Testar query simples com JWT
    console.log('\n7Ô∏è‚É£ TESTANDO QUERY SIMPLES COM JWT...')
    const { data: simpleCategories, error: simpleError } = await supabaseAuth
      .from('categories')
      .select('*')
      .limit(5)

    if (simpleError) {
      console.error('‚ùå Erro na query simples:', simpleError)
    } else {
      console.log('‚úÖ Query simples retornou:', simpleCategories.length, 'categorias')
      simpleCategories.forEach(cat => {
        console.log(`  - ${cat.name} (${cat.slug}) - Context: ${cat.context_id}`)
      })
    }

    // 8. Verificar se h√° problemas de RLS espec√≠ficos
    console.log('\n8Ô∏è‚É£ VERIFICANDO PROBLEMAS DE RLS ESPEC√çFICOS...')
    
    // Tentar buscar categorias sem filtro
    const { data: allCategories, error: allError } = await supabaseAuth
      .from('categories')
      .select('*')

    if (allError) {
      console.log('‚ùå RLS bloqueando acesso total √†s categorias:', allError.message)
    } else {
      console.log('‚úÖ Acesso total √†s categorias funcionando:', allCategories.length, 'categorias')
    }

    // 9. Verificar se h√° problemas de contexto
    console.log('\n9Ô∏è‚É£ VERIFICANDO PROBLEMAS DE CONTEXTO...')
    
    // Verificar se o contexto existe
    const { data: context, error: contextError } = await supabaseAuth
      .from('contexts')
      .select('*')
      .eq('id', userAuth.context_id)
      .single()

    if (contextError) {
      console.log('‚ùå Erro ao buscar contexto:', contextError)
    } else {
      console.log('‚úÖ Contexto encontrado:', context.name)
    }

    // 10. Testar query espec√≠fica do contexto
    console.log('\nüîü TESTANDO QUERY ESPEC√çFICA DO CONTEXTO...')
    const { data: contextCategories, error: contextCatError } = await supabaseAuth
      .from('categories')
      .select('*')
      .eq('context_id', userAuth.context_id)

    if (contextCatError) {
      console.log('‚ùå Erro ao buscar categorias do contexto:', contextCatError)
    } else {
      console.log('‚úÖ Categorias do contexto encontradas:', contextCategories.length)
      contextCategories.forEach(cat => {
        console.log(`  - ${cat.name} (${cat.slug})`)
      })
    }

    console.log('\nüéØ DEBUG CATEGORIAS CONCLU√çDO!')
    console.log('=' .repeat(50))
    console.log('üìã RESUMO:')
    console.log(`- Usu√°rio com JWT: ${userAuth ? '‚úÖ' : '‚ùå'}`)
    console.log(`- Categorias globais: ${globalCategories?.length || 0}`)
    console.log(`- Categorias espec√≠ficas: ${specificCategories?.length || 0}`)
    console.log(`- Query OR: ${orCategories?.length || 0}`)
    console.log(`- Query com join: ${joinCategories?.length || 0}`)
    console.log(`- Query simples: ${simpleCategories?.length || 0}`)
    console.log(`- Acesso total: ${allCategories?.length || 0}`)
    console.log(`- Contexto: ${context ? '‚úÖ' : '‚ùå'}`)
    console.log(`- Categorias do contexto: ${contextCategories?.length || 0}`)

    // 11. Diagn√≥stico final
    console.log('\n1Ô∏è‚É£1Ô∏è‚É£ DIAGN√ìSTICO FINAL...')
    if (orCategories && orCategories.length > 0) {
      console.log('‚úÖ QUERY OR FUNCIONANDO - Categorias devem aparecer no frontend')
    } else if (simpleCategories && simpleCategories.length > 0) {
      console.log('‚ö†Ô∏è QUERY SIMPLES FUNCIONANDO - Problema na query OR')
    } else if (allCategories && allCategories.length > 0) {
      console.log('‚ö†Ô∏è ACESSO TOTAL FUNCIONANDO - Problema nas queries espec√≠ficas')
    } else {
      console.log('‚ùå RLS BLOQUEANDO TUDO - Necess√°rio corrigir pol√≠ticas RLS')
    }

  } catch (error) {
    console.error('‚ùå Erro geral:', error)
  }
}

debugCategoriasJWT()
