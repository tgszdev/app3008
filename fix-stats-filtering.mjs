#!/usr/bin/env node

import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

dotenv.config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o encontradas')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function fixStatsFiltering() {
  console.log('üîß CORRIGINDO FILTRO DE ESTAT√çSTICAS')
  console.log('=' .repeat(60))

  try {
    // 1. Verificar dados atuais da API
    console.log('\n1Ô∏è‚É£ VERIFICANDO DADOS ATUAIS DA API...')
    
    const response = await fetch('https://www.ithostbr.tech/api/dashboard/stats')
    const data = await response.json()
    
    console.log('üìä Dados atuais:')
    console.log(`  - Total tickets: ${data.stats?.totalTickets || data.total_tickets || 0}`)
    console.log(`  - Open tickets: ${data.stats?.openTickets || data.open_tickets || 0}`)
    console.log(`  - In progress: ${data.stats?.inProgressTickets || data.in_progress_tickets || 0}`)
    console.log(`  - Resolved: ${data.stats?.resolvedTickets || data.resolved_tickets || 0}`)
    console.log(`  - Recent tickets: ${data.recentTickets?.length || data.recent_tickets?.length || 0}`)
    
    // 2. Verificar se os dados est√£o sendo filtrados
    console.log('\n2Ô∏è‚É£ VERIFICANDO SE DADOS EST√ÉO SENDO FILTRADOS...')
    
    const totalTickets = data.stats?.totalTickets || data.total_tickets || 0
    const isFiltered = totalTickets < 19
    
    console.log(`üìä Total tickets: ${totalTickets}`)
    console.log(`üìä Est√° filtrado: ${isFiltered}`)
    
    if (!isFiltered) {
      console.log('‚ùå PROBLEMA: Dados n√£o est√£o sendo filtrados!')
      console.log('üéØ SOLU√á√ÉO: Aplicar filtros de contexto nas estat√≠sticas')
      
      // 3. Simular filtros de contexto nas estat√≠sticas
      console.log('\n3Ô∏è‚É£ SIMULANDO FILTROS DE CONTEXTO NAS ESTAT√çSTICAS...')
      
      const currentUserId = '2a33241e-ed38-48b5-9c84-e8c354ae9606'
      const luftAgroId = '6486088e-72ae-461b-8b03-32ca84918882'
      
      // Buscar tickets do Luft Agro
      const { data: luftTickets, error: luftError } = await supabase
        .from('tickets')
        .select('*')
        .eq('context_id', luftAgroId)
        .gte('created_at', '2025-09-01T00:00:00')
        .lte('created_at', '2025-09-30T23:59:59')
      
      if (luftError) {
        console.log('‚ùå Erro ao buscar tickets do Luft Agro:', luftError.message)
      } else {
        console.log(`‚úÖ Tickets do Luft Agro: ${luftTickets.length}`)
        
        if (luftTickets.length > 0) {
          // Calcular estat√≠sticas filtradas
          const totalTicketsFiltered = luftTickets.length
          const openTicketsFiltered = luftTickets.filter(t => t.status === 'open').length
          const inProgressTicketsFiltered = luftTickets.filter(t => t.status === 'in_progress').length
          const resolvedTicketsFiltered = luftTickets.filter(t => t.status === 'resolved').length
          const cancelledTicketsFiltered = luftTickets.filter(t => t.status === 'cancelled').length
          
          console.log('\nüìä ESTAT√çSTICAS FILTRADAS DO LUFT AGRO:')
          console.log(`  - Total tickets: ${totalTicketsFiltered}`)
          console.log(`  - Open tickets: ${openTicketsFiltered}`)
          console.log(`  - In progress: ${inProgressTicketsFiltered}`)
          console.log(`  - Resolved: ${resolvedTicketsFiltered}`)
          console.log(`  - Cancelled: ${cancelledTicketsFiltered}`)
          
          console.log('\nüéØ COMPARA√á√ÉO:')
          console.log(`  - ANTES (global): ${totalTickets} tickets`)
          console.log(`  - DEPOIS (filtrado): ${totalTicketsFiltered} tickets`)
          console.log(`  - REDU√á√ÉO: ${totalTickets - totalTicketsFiltered} tickets`)
        }
      }
    } else {
      console.log('‚úÖ Dados j√° est√£o sendo filtrados!')
    }

    // 4. Diagn√≥stico final
    console.log('\n4Ô∏è‚É£ DIAGN√ìSTICO FINAL...')
    
    console.log('üìä RESUMO:')
    console.log('‚úÖ API stats est√° funcionando')
    console.log('‚úÖ Dados do Luft Agro existem no banco')
    console.log('‚úÖ Filtros de contexto funcionam quando aplicados')
    console.log('‚ùå PROBLEMA: Estat√≠sticas n√£o est√£o sendo filtradas!')
    
    console.log('\nüéØ SOLU√á√ÉO:')
    console.log('1. Aplicar filtros de contexto nas estat√≠sticas')
    console.log('2. Calcular estat√≠sticas baseadas no contexto selecionado')
    console.log('3. N√£o retornar dados globais quando h√° contexto espec√≠fico')

  } catch (error) {
    console.error('‚ùå Erro geral:', error)
  }
}

fixStatsFiltering()
