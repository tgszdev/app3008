import { createClient } from '@supabase/supabase-js'
import { config } from 'dotenv'

// Carregar vari√°veis de ambiente
config({ path: '.env.local' })

const supabaseAdmin = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
)

async function debugSeletorCompleto() {
  console.log('üîç DEBUG COMPLETO - SELETOR M√öLTIPLO')
  console.log('=' * 60)

  const userId = '2a33241e-ed38-48b5-9c84-e8c354ae9606' // ID do Thiago Rodrigues Souza

  // --- 1. VERIFICAR DADOS DO USU√ÅRIO ---
  console.log('\nüë§ 1. DADOS DO USU√ÅRIO')
  console.log('=' * 30)
  const { data: userData, error: userError } = await supabaseAdmin
    .from('users')
    .select('id, email, name, role, user_type, context_id, context_name, context_type')
    .eq('id', userId)
    .single()

  if (userError) {
    console.error('‚ùå Erro ao buscar dados do usu√°rio:', userError)
    return
  }
  console.log('üìä Dados do usu√°rio:', userData)

  // --- 2. VERIFICAR CONTEXTOS ASSOCIADOS ---
  console.log('\nüè¢ 2. CONTEXTOS ASSOCIADOS')
  console.log('=' * 30)
  const { data: userContexts, error: userContextsError } = await supabaseAdmin
    .from('user_contexts')
    .select('context_id, contexts(id, name, slug, type, is_active)')
    .eq('user_id', userId)

  if (userContextsError) {
    console.error('‚ùå Erro ao buscar contextos associados:', userContextsError)
    return
  }

  console.log(`üìä Total de contextos associados: ${userContexts.length}`)
  userContexts.forEach((uc, index) => {
    if (uc.contexts) {
      console.log(`  ${index + 1}. ${uc.contexts.name} (${uc.contexts.type}) - Ativo: ${uc.contexts.is_active} - ID: ${uc.context_id}`)
    } else {
      console.log(`  ${index + 1}. ‚ùå Contexto √≥rf√£o (ID: ${uc.context_id})`)
    }
  })

  // --- 3. SIMULAR AUTH-CONFIG.TS ---
  console.log('\nüîÑ 3. SIMULANDO AUTH-CONFIG.TS')
  console.log('=' * 30)
  
  const availableContexts = userContexts
    .filter(uc => uc.contexts && uc.contexts.is_active)
    .map(uc => ({
      id: uc.contexts.id,
      name: uc.contexts.name,
      slug: uc.contexts.slug,
      type: uc.contexts.type
    }))

  console.log('üìä AvailableContexts que seriam passados para a sess√£o:')
  console.log(`üìä Total: ${availableContexts.length}`)
  availableContexts.forEach((ctx, index) => {
    console.log(`  ${index + 1}. ${ctx.name} (${ctx.type}) - ID: ${ctx.id}`)
  })

  // --- 4. SIMULAR ORGANIZATION CONTEXT ---
  console.log('\nüîÑ 4. SIMULANDO ORGANIZATION CONTEXT')
  console.log('=' * 30)
  
  // Simular o que o OrganizationContext deveria retornar
  const simulatedAvailableContexts = availableContexts
  const simulatedCurrentContext = simulatedAvailableContexts.length > 0 ? simulatedAvailableContexts[0] : null

  console.log('üìä AvailableContexts que o OrganizationContext deveria retornar:')
  simulatedAvailableContexts.forEach((ctx, index) => {
    console.log(`  ${index + 1}. ${ctx.name} (${ctx.type}) - ID: ${ctx.id}`)
  })

  console.log('üìä CurrentContext que o OrganizationContext deveria retornar:')
  if (simulatedCurrentContext) {
    console.log(`  ${simulatedCurrentContext.name} (${simulatedCurrentContext.type}) - ID: ${simulatedCurrentContext.id}`)
  } else {
    console.log('  Nenhum contexto atual')
  }

  // --- 5. SIMULAR MULTI CLIENT SELECTOR ---
  console.log('\nüéØ 5. SIMULANDO MULTI CLIENT SELECTOR')
  console.log('=' * 30)
  
  // Simular o estado inicial do MultiClientSelector
  let selectedClients = []
  console.log('üìä Estado inicial do seletor:')
  console.log(`  selectedClients: ${JSON.stringify(selectedClients)}`)
  console.log(`  availableContexts.length: ${simulatedAvailableContexts.length}`)

  // Simular sele√ß√£o de Luft Agro
  const luftAgroId = '6486088e-72ae-461b-8b03-32ca84918882'
  console.log('\nüîÑ Simulando sele√ß√£o de Luft Agro...')
  selectedClients = [...selectedClients, luftAgroId]
  console.log(`  selectedClients ap√≥s sele√ß√£o: ${JSON.stringify(selectedClients)}`)

  // Simular getSelectedClientsInfo
  const getSelectedClientsInfo = (selectedClients, availableContexts) => {
    if (selectedClients.length === 0) {
      return "Selecionar clientes..."
    }
    
    if (selectedClients.length === availableContexts.length) {
      return "Todos os clientes"
    }
    
    if (selectedClients.length === 1) {
      const selected = availableContexts.find(c => c.id === selectedClients[0])
      return selected?.name || "Cliente selecionado"
    }
    
    return `${selectedClients.length} clientes selecionados`
  }

  const displayText = getSelectedClientsInfo(selectedClients, simulatedAvailableContexts)
  console.log(`üìä Texto que deveria aparecer no bot√£o: "${displayText}"`)

  // --- 6. VERIFICAR PROBLEMAS ESPEC√çFICOS ---
  console.log('\nüîç 6. VERIFICANDO PROBLEMAS ESPEC√çFICOS')
  console.log('=' * 30)
  
  // Verificar se Luft Agro est√° nos contextos dispon√≠veis
  const luftAgroInContexts = simulatedAvailableContexts.find(ctx => ctx.id === luftAgroId)
  if (luftAgroInContexts) {
    console.log('‚úÖ Luft Agro est√° nos contextos dispon√≠veis')
    console.log(`üìä Dados do Luft Agro: ${JSON.stringify(luftAgroInContexts)}`)
  } else {
    console.log('‚ùå Luft Agro N√ÉO est√° nos contextos dispon√≠veis')
  }

  // Verificar se o problema √© no OrganizationContext
  console.log('\nüîç Verificando se OrganizationContext est√° carregando corretamente...')
  if (simulatedAvailableContexts.length === 0) {
    console.log('‚ùå PROBLEMA: availableContexts est√° vazio no OrganizationContext')
    console.log('üí° Solu√ß√£o: Verificar se OrganizationContext est√° carregando os contextos da sess√£o')
  } else {
    console.log(`‚úÖ availableContexts tem ${simulatedAvailableContexts.length} contextos`)
  }

  // Verificar se o problema √© no MultiClientSelector
  console.log('\nüîç Verificando se MultiClientSelector est√° funcionando...')
  if (selectedClients.length === 0) {
    console.log('‚ùå PROBLEMA: selectedClients est√° vazio no MultiClientSelector')
    console.log('üí° Solu√ß√£o: Verificar se handleToggleClient est√° funcionando')
  } else {
    console.log(`‚úÖ selectedClients tem ${selectedClients.length} sele√ß√µes`)
  }

  // --- 7. TESTAR SELE√á√ÉO M√öLTIPLA ---
  console.log('\nüéØ 7. TESTANDO SELE√á√ÉO M√öLTIPLA')
  console.log('=' * 30)
  
  // Simular sele√ß√£o de m√∫ltiplos clientes
  const sistemaAtualId = 'fa4a4a34-f662-4da1-94d8-b77b5c578d6b'
  const organizacaoPadraoId = 'a7791594-c44d-47aa-8ddd-97ecfb6cc8ed'
  
  console.log('üîÑ Simulando sele√ß√£o m√∫ltipla...')
  selectedClients = [luftAgroId, sistemaAtualId, organizacaoPadraoId]
  console.log(`  selectedClients ap√≥s sele√ß√£o m√∫ltipla: ${JSON.stringify(selectedClients)}`)
  
  const displayTextMultiple = getSelectedClientsInfo(selectedClients, simulatedAvailableContexts)
  console.log(`üìä Texto que deveria aparecer com m√∫ltiplas sele√ß√µes: "${displayTextMultiple}"`)

  // --- 8. RESUMO DOS PROBLEMAS ---
  console.log('\nüìä RESUMO DOS PROBLEMAS')
  console.log('=' * 60)
  
  console.log(`‚úÖ Usu√°rio encontrado: ${userData.email}`)
  console.log(`‚úÖ user_type: ${userData.user_type}`)
  console.log(`‚úÖ Contextos associados: ${userContexts.length}`)
  console.log(`‚úÖ Contextos ativos: ${availableContexts.length}`)
  console.log(`‚úÖ Luft Agro dispon√≠vel: ${luftAgroInContexts ? 'Sim' : 'N√£o'}`)
  
  if (availableContexts.length === 0) {
    console.log('\n‚ùå PROBLEMA PRINCIPAL: availableContexts est√° vazio')
    console.log('üí° Solu√ß√£o: Verificar se OrganizationContext est√° carregando os contextos da sess√£o')
  } else if (!luftAgroInContexts) {
    console.log('\n‚ùå PROBLEMA PRINCIPAL: Luft Agro n√£o est√° nos contextos dispon√≠veis')
    console.log('üí° Solu√ß√£o: Verificar se Luft Agro est√° ativo e associado ao usu√°rio')
  } else {
    console.log('\n‚úÖ DADOS CORRETOS: Tudo parece estar funcionando no backend')
    console.log('üí° Problema pode estar no frontend:')
    console.log('  - OrganizationContext n√£o est√° carregando availableContexts')
    console.log('  - MultiClientSelector n√£o est√° recebendo availableContexts')
    console.log('  - handleToggleClient n√£o est√° funcionando')
    console.log('  - getSelectedClientsInfo n√£o est√° funcionando')
  }

  console.log('\nüîß PR√ìXIMOS PASSOS:')
  console.log('1. Verificar se OrganizationContext est√° carregando availableContexts')
  console.log('2. Verificar se MultiClientSelector est√° recebendo availableContexts')
  console.log('3. Verificar se handleToggleClient est√° funcionando')
  console.log('4. Verificar se getSelectedClientsInfo est√° funcionando')
  console.log('5. Verificar se h√° conflitos entre estados')
}

debugSeletorCompleto()
