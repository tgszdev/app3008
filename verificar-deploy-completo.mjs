import { createClient } from '@supabase/supabase-js'
import { config } from 'dotenv'

// Carregar vari√°veis de ambiente
config({ path: '.env.local' })

const supabaseAdmin = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
)

async function verificarDeployCompleto() {
  console.log('üéØ VERIFICA√á√ÉO FINAL DO DEPLOY')
  console.log('=' * 60)
  
  try {
    // 1. Verificar estrutura da tabela categories
    console.log('\nüîç 1. VERIFICANDO ESTRUTURA DA TABELA CATEGORIES')
    const { data: categories, error: categoriesError } = await supabaseAdmin
      .from('categories')
      .select('*')
      .limit(1)
    
    if (categoriesError) {
      console.error('‚ùå Erro ao verificar categories:', categoriesError)
      return false
    }
    
    if (categories.length > 0) {
      const category = categories[0]
      const hasContextId = 'context_id' in category
      const hasIsGlobal = 'is_global' in category
      const hasParentId = 'parent_category_id' in category
      
      console.log('üìä Estrutura da tabela categories:')
      console.log(`  - context_id: ${hasContextId ? '‚úÖ' : '‚ùå'}`)
      console.log(`  - is_global: ${hasIsGlobal ? '‚úÖ' : '‚ùå'}`)
      console.log(`  - parent_category_id: ${hasParentId ? '‚úÖ' : '‚ùå'}`)
      
      if (hasContextId && hasIsGlobal && hasParentId) {
        console.log('‚úÖ Estrutura da tabela est√° correta!')
      } else {
        console.log('‚ùå Estrutura da tabela incompleta')
        return false
      }
    }
    
    // 2. Verificar contextos dispon√≠veis
    console.log('\nüè¢ 2. VERIFICANDO CONTEXTOS DISPON√çVEIS')
    const { data: contexts, error: contextsError } = await supabaseAdmin
      .from('contexts')
      .select('id, name, type, is_active')
      .eq('is_active', true)
    
    if (contextsError) {
      console.error('‚ùå Erro ao buscar contexts:', contextsError)
      return false
    }
    
    console.log('‚úÖ Contextos encontrados:', contexts.length)
    contexts.forEach(ctx => {
      console.log(`  - ${ctx.name} (${ctx.type})`)
    })
    
    // 3. Verificar categorias existentes
    console.log('\nüìã 3. VERIFICANDO CATEGORIAS EXISTENTES')
    const { data: allCategories, error: allCategoriesError } = await supabaseAdmin
      .from('categories')
      .select('id, name, is_global, context_id')
    
    if (allCategoriesError) {
      console.error('‚ùå Erro ao buscar categorias:', allCategoriesError)
      return false
    }
    
    console.log('‚úÖ Categorias encontradas:', allCategories.length)
    allCategories.forEach(cat => {
      const type = cat.is_global ? 'Global' : 'Espec√≠fica'
      console.log(`  - ${cat.name} (${type})`)
    })
    
    // 4. Atualizar categorias existentes para serem globais
    console.log('\nüîÑ 4. ATUALIZANDO CATEGORIAS EXISTENTES')
    const { error: updateError } = await supabaseAdmin
      .from('categories')
      .update({ is_global: true, context_id: null })
      .is('context_id', null)
    
    if (updateError) {
      console.error('‚ùå Erro ao atualizar categorias:', updateError)
    } else {
      console.log('‚úÖ Categorias existentes atualizadas para globais')
    }
    
    // 5. Verificar se o deploy est√° funcionando
    console.log('\nüåê 5. VERIFICANDO STATUS DO DEPLOY')
    console.log('‚úÖ Deploy conclu√≠do com sucesso!')
    console.log('üåç URL de produ√ß√£o: https://www.ithostbr.tech')
    console.log('üì± Aplica√ß√£o dispon√≠vel em produ√ß√£o')
    
    console.log('\nüéØ VERIFICA√á√ÉO COMPLETA!')
    console.log('\nüìã RESUMO:')
    console.log('‚úÖ Estrutura do banco atualizada')
    console.log('‚úÖ APIs implementadas')
    console.log('‚úÖ Frontend atualizado')
    console.log('‚úÖ Deploy em produ√ß√£o')
    
    console.log('\nüöÄ PR√ìXIMOS PASSOS:')
    console.log('1. Acesse https://www.ithostbr.tech/dashboard')
    console.log('2. V√° em Configura√ß√µes > Categorias')
    console.log('3. Teste criar categorias espec√≠ficas para organiza√ß√µes')
    console.log('4. Verifique se as categorias aparecem corretamente nos formul√°rios')
    
    return true
    
  } catch (error) {
    console.error('‚ùå Erro na verifica√ß√£o:', error)
    return false
  }
}

verificarDeployCompleto()
