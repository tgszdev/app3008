import { NextRequest, NextResponse } from 'next/server'
import { auth } from '@/lib/auth'
import { supabaseAdmin } from '@/lib/supabase'

export async function GET(request: NextRequest) {
  try {
    // Verificar autentica√ß√£o
    const session = await auth()
    if (!session) {
      return NextResponse.json({ error: 'N√£o autorizado' }, { status: 401 })
    }

    const userId = session.user.id
    const diagnostics: any = {
      user: {
        id: userId,
        email: session.user.email,
        name: session.user.name,
        role: session.user.role
      },
      checks: []
    }

    // 1. Verificar se o usu√°rio tem prefer√™ncias de notifica√ß√£o
    const { data: preferences, error: prefError } = await supabaseAdmin
      .from('user_notification_preferences')
      .select('*')
      .eq('user_id', userId)
      .single()

    if (prefError || !preferences) {
      diagnostics.checks.push({
        test: 'Prefer√™ncias de Notifica√ß√£o',
        status: '‚ùå N√ÉO CONFIGURADO',
        message: 'Usu√°rio n√£o tem prefer√™ncias de notifica√ß√£o configuradas',
        action: 'Acesse /dashboard/settings/notifications para configurar'
      })

      // Criar prefer√™ncias padr√£o se n√£o existirem
      if (!preferences) {
        const { error: createError } = await supabaseAdmin
          .from('user_notification_preferences')
          .insert({
            user_id: userId,
            email_enabled: true,
            push_enabled: false,
            in_app_enabled: true,
            ticket_created: { email: true, push: false, in_app: true },
            ticket_assigned: { email: true, push: false, in_app: true },
            ticket_updated: { email: true, push: false, in_app: true },
            ticket_resolved: { email: true, push: false, in_app: true },
            ticket_status_changed: { email: true, push: false, in_app: true },
            ticket_priority_changed: { email: true, push: false, in_app: true },
            comment_added: { email: true, push: false, in_app: true },
            comment_mention: { email: true, push: false, in_app: true },
            quiet_hours_enabled: false,
            email_frequency: 'immediate'
          })

        if (!createError) {
          diagnostics.checks.push({
            test: 'Criar Prefer√™ncias Padr√£o',
            status: '‚úÖ CRIADO',
            message: 'Prefer√™ncias padr√£o foram criadas com sucesso'
          })
        }
      }
    } else {
      diagnostics.preferences = preferences
      diagnostics.checks.push({
        test: 'Prefer√™ncias de Notifica√ß√£o',
        status: '‚úÖ CONFIGURADO',
        message: 'Prefer√™ncias encontradas',
        details: {
          email_enabled: preferences.email_enabled,
          push_enabled: preferences.push_enabled,
          in_app_enabled: preferences.in_app_enabled
        }
      })
    }

    // 2. Verificar configura√ß√£o de email no sistema
    const { data: emailConfig, error: emailError } = await supabaseAdmin
      .from('system_settings')
      .select('*')
      .eq('key', 'email_config')
      .single()

    if (emailError || !emailConfig) {
      diagnostics.checks.push({
        test: 'Configura√ß√£o de Email',
        status: '‚ùå N√ÉO CONFIGURADO',
        message: 'Sistema n√£o tem configura√ß√£o de email',
        action: 'Admin deve configurar em /dashboard/settings'
      })
    } else {
      const config = emailConfig.value
      diagnostics.checks.push({
        test: 'Configura√ß√£o de Email',
        status: '‚úÖ CONFIGURADO',
        message: 'Email configurado no sistema',
        details: {
          host: config.host,
          port: config.port,
          user: config.user ? '‚úÖ Configurado' : '‚ùå N√£o configurado',
          pass: config.pass ? '‚úÖ Configurado' : '‚ùå N√£o configurado'
        }
      })
    }

    // 3. Verificar vari√°veis de ambiente (fallback)
    diagnostics.checks.push({
      test: 'Vari√°veis de Ambiente (Fallback)',
      status: process.env.SMTP_USER && process.env.SMTP_PASS ? '‚úÖ CONFIGURADO' : '‚ùå N√ÉO CONFIGURADO',
      message: 'Configura√ß√£o de fallback',
      details: {
        SMTP_USER: process.env.SMTP_USER ? '‚úÖ Configurado' : '‚ùå N√£o configurado',
        SMTP_PASS: process.env.SMTP_PASS ? '‚úÖ Configurado' : '‚ùå N√£o configurado'
      }
    })

    // 4. Verificar √∫ltimas notifica√ß√µes
    const { data: recentNotifications, error: notifError } = await supabaseAdmin
      .from('notifications')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: false })
      .limit(5)

    diagnostics.recentNotifications = recentNotifications || []
    diagnostics.checks.push({
      test: 'Notifica√ß√µes Recentes',
      status: recentNotifications && recentNotifications.length > 0 ? '‚úÖ EXISTEM' : '‚ö†Ô∏è NENHUMA',
      message: `${recentNotifications?.length || 0} notifica√ß√µes encontradas`,
      details: recentNotifications?.map(n => ({
        title: n.title,
        type: n.type,
        created_at: n.created_at,
        is_read: n.is_read
      }))
    })

    // 5. Testar envio de notifica√ß√£o
    const { createAndSendNotification } = await import('@/lib/notifications')
    const testResult = await createAndSendNotification({
      user_id: userId,
      title: 'üîç Teste de Diagn√≥stico',
      message: 'Esta √© uma notifica√ß√£o de teste para verificar se o sistema est√° funcionando',
      type: 'test',
      severity: 'info',
      data: {
        test_time: new Date().toISOString()
      },
      action_url: '/dashboard/settings/notifications'
    })

    diagnostics.checks.push({
      test: 'Envio de Notifica√ß√£o de Teste',
      status: testResult ? '‚úÖ SUCESSO' : '‚ùå FALHOU',
      message: testResult ? 'Notifica√ß√£o de teste enviada' : 'Falha ao enviar notifica√ß√£o'
    })

    // Resumo
    const allChecksPass = diagnostics.checks.every((check: any) => 
      check.status.includes('‚úÖ') || check.status.includes('CRIADO')
    )

    diagnostics.summary = {
      status: allChecksPass ? '‚úÖ SISTEMA OK' : '‚ö†Ô∏è A√á√ÉO NECESS√ÅRIA',
      message: allChecksPass 
        ? 'Sistema de notifica√ß√µes est√° funcionando corretamente' 
        : 'Algumas configura√ß√µes precisam ser ajustadas',
      timestamp: new Date().toISOString()
    }

    return NextResponse.json(diagnostics)
  } catch (error: any) {
    console.error('Erro no diagn√≥stico:', error)
    return NextResponse.json({ 
      error: 'Erro ao executar diagn√≥stico',
      details: error.message 
    }, { status: 500 })
  }
}