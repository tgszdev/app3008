#!/usr/bin/env node

import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

dotenv.config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o encontradas')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function debugFilterIssue() {
  console.log('üîç DEBUGANDO PROBLEMA DO FILTRO')
  console.log('=' .repeat(60))

  try {
    // 1. Verificar tickets do Luft Agro
    console.log('\n1Ô∏è‚É£ VERIFICANDO TICKETS DO LUFT AGRO...')
    
    const luftAgroId = '6486088e-72ae-461b-8b03-32ca84918882'
    const { data: luftTickets, error: luftError } = await supabase
      .from('tickets')
      .select('*')
      .eq('context_id', luftAgroId)
      .order('created_at', { ascending: false })

    if (luftError) {
      console.log('‚ùå Erro ao buscar tickets do Luft Agro:', luftError.message)
    } else {
      console.log('‚úÖ Tickets do Luft Agro:', luftTickets.length)
      
      if (luftTickets.length > 0) {
        luftTickets.forEach(ticket => {
          console.log(`  - ${ticket.title}: ${ticket.status} (${ticket.priority})`)
          console.log(`    ID: ${ticket.id}`)
          console.log(`    Context ID: ${ticket.context_id}`)
          console.log(`    Created: ${ticket.created_at}`)
          console.log(`    Created By: ${ticket.created_by}`)
          console.log('')
        })
      }
    }

    // 2. Verificar se o problema √© no frontend
    console.log('\n2Ô∏è‚É£ VERIFICANDO SE O PROBLEMA √â NO FRONTEND...')
    
    console.log('üîç Poss√≠veis problemas:')
    console.log('1. selectedClients n√£o est√° sendo atualizado')
    console.log('2. useEffect n√£o est√° sendo disparado')
    console.log('3. API n√£o est√° retornando dados corretos')
    console.log('4. Filtro n√£o est√° sendo aplicado corretamente')

    // 3. Verificar dados que a API stats retorna
    console.log('\n3Ô∏è‚É£ VERIFICANDO DADOS DA API STATS...')
    
    try {
      const response = await fetch('https://www.ithostbr.tech/api/dashboard/stats')
      const data = await response.json()
      
      console.log('üì° Status da API stats:', response.status)
      console.log('üìä Dados retornados:')
      console.log(`  - Total tickets: ${data.stats?.totalTickets || data.total_tickets || 0}`)
      console.log(`  - Open tickets: ${data.stats?.openTickets || data.open_tickets || 0}`)
      console.log(`  - In progress: ${data.stats?.inProgressTickets || data.in_progress_tickets || 0}`)
      console.log(`  - Resolved: ${data.stats?.resolvedTickets || data.resolved_tickets || 0}`)
      console.log(`  - Recent tickets: ${data.recentTickets?.length || data.recent_tickets?.length || 0}`)
      
      if (data.recentTickets || data.recent_tickets) {
        console.log('üìã Tickets recentes:')
        const recentTickets = data.recentTickets || data.recent_tickets || []
        recentTickets.slice(0, 5).forEach(ticket => {
          console.log(`  - ${ticket.title}: ${ticket.status} (Context: ${ticket.context_id})`)
        })
      }
      
    } catch (error) {
      console.log('‚ùå Erro ao testar API stats:', error.message)
    }

    // 4. Verificar se o problema √© na l√≥gica do filtro
    console.log('\n4Ô∏è‚É£ VERIFICANDO L√ìGICA DO FILTRO...')
    
    console.log('üîç L√≥gica atual do filtro:')
    console.log('1. selectedClients = ["6486088e-72ae-461b-8b03-32ca84918882"]')
    console.log('2. recentTicketsData.filter(ticket => selectedClients.includes(ticket.context_id))')
    console.log('3. Se ticket.context_id === "6486088e-72ae-461b-8b03-32ca84918882" ‚Üí deve aparecer')
    
    // 5. Simular o filtro manualmente
    console.log('\n5Ô∏è‚É£ SIMULANDO FILTRO MANUALMENTE...')
    
    try {
      const response = await fetch('https://www.ithostbr.tech/api/dashboard/stats')
      const data = await response.json()
      
      if (data.recentTickets || data.recent_tickets) {
        const recentTickets = data.recentTickets || data.recent_tickets || []
        const luftAgroId = '6486088e-72ae-461b-8b03-32ca84918882'
        
        console.log('üìä Tickets recentes antes do filtro:', recentTickets.length)
        
        const filteredTickets = recentTickets.filter(ticket => 
          ticket.context_id === luftAgroId
        )
        
        console.log('üìä Tickets recentes ap√≥s filtro:', filteredTickets.length)
        
        if (filteredTickets.length > 0) {
          console.log('‚úÖ Filtro funcionaria! Tickets encontrados:')
          filteredTickets.forEach(ticket => {
            console.log(`  - ${ticket.title}: ${ticket.status}`)
          })
        } else {
          console.log('‚ùå Filtro n√£o funcionaria! Nenhum ticket encontrado')
          console.log('üîç Verificando context_ids dos tickets:')
          recentTickets.forEach(ticket => {
            console.log(`  - ${ticket.title}: context_id = ${ticket.context_id}`)
          })
        }
      }
      
    } catch (error) {
      console.log('‚ùå Erro ao simular filtro:', error.message)
    }

    // 6. Diagn√≥stico final
    console.log('\n6Ô∏è‚É£ DIAGN√ìSTICO FINAL...')
    
    console.log('üìä RESUMO DO DEBUG:')
    console.log('‚úÖ Tickets do Luft Agro existem no banco')
    console.log('‚úÖ API stats est√° funcionando')
    console.log('‚úÖ Dados est√£o sendo retornados')
    
    console.log('\nüéØ POSS√çVEIS CAUSAS:')
    console.log('1. selectedClients n√£o est√° sendo atualizado no frontend')
    console.log('2. useEffect n√£o est√° sendo disparado quando selectedClients muda')
    console.log('3. Filtro est√° sendo aplicado mas dados n√£o est√£o sendo exibidos')
    console.log('4. Problema na l√≥gica de renderiza√ß√£o do componente')
    
    console.log('\nüîß PR√ìXIMOS PASSOS:')
    console.log('1. Verificar se selectedClients est√° sendo atualizado')
    console.log('2. Verificar se useEffect est√° sendo disparado')
    console.log('3. Verificar se dados filtrados est√£o sendo exibidos')
    console.log('4. Adicionar logs para debug no frontend')

  } catch (error) {
    console.error('‚ùå Erro geral:', error)
  }
}

debugFilterIssue()
