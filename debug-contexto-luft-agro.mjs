import { createClient } from '@supabase/supabase-js'
import { config } from 'dotenv'

// Carregar vari√°veis de ambiente
config({ path: '.env.local' })

const supabaseAdmin = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
)

async function debugContextoLuftAgro() {
  console.log('üîç DEBUG - CONTEXTO LUFT AGRO FALTANDO')
  console.log('=' * 50)

  const userId = '2a33241e-ed38-48b5-9c84-e8c354ae9606' // ID do Thiago Rodrigues Souza
  const luftAgroId = '6486088e-72ae-461b-8b03-32ca84918882' // ID do Luft Agro

  // --- 1. VERIFICAR SE LUFT AGRO EXISTE ---
  console.log('\nüè¢ 1. VERIFICANDO SE LUFT AGRO EXISTE')
  console.log('=' * 30)
  const { data: luftAgro, error: luftError } = await supabaseAdmin
    .from('contexts')
    .select('id, name, slug, type, is_active')
    .eq('id', luftAgroId)
    .single()

  if (luftError) {
    console.error('‚ùå Erro ao buscar Luft Agro:', luftError)
    return
  }

  console.log('üìä Luft Agro encontrado:', luftAgro)
  console.log('üìä Ativo:', luftAgro.is_active)

  // --- 2. VERIFICAR ASSOCIA√á√ÉO DO USU√ÅRIO COM LUFT AGRO ---
  console.log('\nüîó 2. VERIFICANDO ASSOCIA√á√ÉO COM LUFT AGRO')
  console.log('=' * 30)
  const { data: userLuftAssociation, error: assocError } = await supabaseAdmin
    .from('user_contexts')
    .select('user_id, context_id, contexts(id, name, slug, type, is_active)')
    .eq('user_id', userId)
    .eq('context_id', luftAgroId)
    .single()

  if (assocError) {
    console.error('‚ùå Erro ao buscar associa√ß√£o:', assocError)
    return
  }

  console.log('üìä Associa√ß√£o encontrada:', userLuftAssociation)
  if (userLuftAssociation.contexts) {
    console.log('üìä Contexto da associa√ß√£o:', userLuftAssociation.contexts)
  } else {
    console.log('‚ùå Contexto da associa√ß√£o √© null (√≥rf√£o)')
  }

  // --- 3. VERIFICAR TODAS AS ASSOCIA√á√ïES DO USU√ÅRIO ---
  console.log('\nüìã 3. TODAS AS ASSOCIA√á√ïES DO USU√ÅRIO')
  console.log('=' * 30)
  const { data: allUserContexts, error: allError } = await supabaseAdmin
    .from('user_contexts')
    .select('context_id, contexts(id, name, slug, type, is_active)')
    .eq('user_id', userId)

  if (allError) {
    console.error('‚ùå Erro ao buscar todas as associa√ß√µes:', allError)
    return
  }

  console.log(`üìä Total de associa√ß√µes: ${allUserContexts.length}`)
  allUserContexts.forEach((uc, index) => {
    if (uc.contexts) {
      console.log(`  ${index + 1}. ${uc.contexts.name} (${uc.contexts.type}) - Ativo: ${uc.contexts.is_active} - ID: ${uc.context_id}`)
    } else {
      console.log(`  ${index + 1}. ‚ùå Contexto √≥rf√£o (ID: ${uc.context_id})`)
    }
  })

  // --- 4. SIMULAR AUTH-CONFIG.TS ---
  console.log('\nüîÑ 4. SIMULANDO AUTH-CONFIG.TS')
  console.log('=' * 30)
  
  // Simular exatamente o que o auth-config.ts faz
  const userContexts = allUserContexts
  const availableContexts = userContexts
    .filter(uc => uc.contexts) // Filtrar contextos v√°lidos
    .map(uc => ({
      id: uc.contexts.id,
      name: uc.contexts.name,
      slug: uc.contexts.slug,
      type: uc.contexts.type
    }))

  console.log('üìä Contextos que seriam passados para a sess√£o:')
  console.log(`üìä Total: ${availableContexts.length}`)
  availableContexts.forEach((ctx, index) => {
    console.log(`  ${index + 1}. ${ctx.name} (${ctx.type}) - ID: ${ctx.id}`)
  })

  // --- 5. VERIFICAR SE LUFT AGRO EST√Å INCLU√çDO ---
  console.log('\nüéØ 5. VERIFICANDO SE LUFT AGRO EST√Å INCLU√çDO')
  console.log('=' * 30)
  
  const luftAgroIncluded = availableContexts.find(ctx => ctx.id === luftAgroId)
  if (luftAgroIncluded) {
    console.log('‚úÖ Luft Agro est√° inclu√≠do nos contextos dispon√≠veis')
    console.log('üìä Dados do Luft Agro:', luftAgroIncluded)
  } else {
    console.log('‚ùå Luft Agro N√ÉO est√° inclu√≠do nos contextos dispon√≠veis')
    console.log('üîç Verificando por que...')
    
    // Verificar se a associa√ß√£o existe mas o contexto √© null
    const luftAssociation = userContexts.find(uc => uc.context_id === luftAgroId)
    if (luftAssociation) {
      if (luftAssociation.contexts) {
        console.log('‚ùå Associa√ß√£o existe e contexto n√£o √© null, mas n√£o passou no filtro')
        console.log('üìä Dados da associa√ß√£o:', luftAssociation)
      } else {
        console.log('‚ùå Associa√ß√£o existe mas contexto √© null (√≥rf√£o)')
        console.log('üìä Dados da associa√ß√£o:', luftAssociation)
      }
    } else {
      console.log('‚ùå Associa√ß√£o n√£o existe')
    }
  }

  // --- 6. VERIFICAR PROBLEMAS ESPEC√çFICOS ---
  console.log('\nüîç 6. VERIFICANDO PROBLEMAS ESPEC√çFICOS')
  console.log('=' * 30)
  
  // Verificar se Luft Agro est√° ativo
  if (luftAgro && !luftAgro.is_active) {
    console.log('‚ùå PROBLEMA: Luft Agro est√° inativo')
    console.log('üí° Solu√ß√£o: Ativar Luft Agro')
  } else {
    console.log('‚úÖ Luft Agro est√° ativo')
  }

  // Verificar se a associa√ß√£o existe
  if (!userLuftAssociation) {
    console.log('‚ùå PROBLEMA: Associa√ß√£o com Luft Agro n√£o existe')
    console.log('üí° Solu√ß√£o: Criar associa√ß√£o')
  } else {
    console.log('‚úÖ Associa√ß√£o com Luft Agro existe')
  }

  // Verificar se o contexto da associa√ß√£o √© null
  if (userLuftAssociation && !userLuftAssociation.contexts) {
    console.log('‚ùå PROBLEMA: Associa√ß√£o existe mas contexto √© null (√≥rf√£o)')
    console.log('üí° Solu√ß√£o: Remover associa√ß√£o √≥rf√£ ou corrigir refer√™ncia')
  } else {
    console.log('‚úÖ Contexto da associa√ß√£o n√£o √© null')
  }

  console.log('\nüìä RESUMO DO DEBUG')
  console.log('=' * 50)
  console.log(`‚úÖ Luft Agro existe: ${luftAgro ? 'Sim' : 'N√£o'}`)
  console.log(`‚úÖ Luft Agro ativo: ${luftAgro?.is_active ? 'Sim' : 'N√£o'}`)
  console.log(`‚úÖ Associa√ß√£o existe: ${userLuftAssociation ? 'Sim' : 'N√£o'}`)
  console.log(`‚úÖ Contexto n√£o √© null: ${userLuftAssociation?.contexts ? 'Sim' : 'N√£o'}`)
  console.log(`‚úÖ Inclu√≠do nos contextos: ${luftAgroIncluded ? 'Sim' : 'N√£o'}`)
  console.log(`üìä Total de contextos dispon√≠veis: ${availableContexts.length}`)
}

debugContextoLuftAgro()
