#!/usr/bin/env node

/**
 * DEBUG ESPEC√çFICO DO ACESSO √ÄS CONFIGURA√á√ïES
 * ============================================
 * 
 * Este script verifica:
 * 1. Login com credenciais espec√≠ficas
 * 2. Permiss√µes para acessar /dashboard/settings
 * 3. Problemas de autoriza√ß√£o
 * 4. Verifica√ß√£o de role e permiss√µes
 */

import { createClient } from '@supabase/supabase-js'
import bcrypt from 'bcryptjs'
import dotenv from 'dotenv'

dotenv.config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    persistSession: false,
    autoRefreshToken: false,
    detectSessionInUrl: false,
  },
})

function log(message, type = 'info') {
  const timestamp = new Date().toISOString()
  const icons = {
    info: '‚ÑπÔ∏è',
    success: '‚úÖ',
    error: '‚ùå',
    warning: '‚ö†Ô∏è',
    step: 'üîÑ'
  }
  console.log(`${icons[type]} [${timestamp}] ${message}`)
}

async function debugSettingsAccess() {
  console.log('üîç DEBUG ESPEC√çFICO DO ACESSO √ÄS CONFIGURA√á√ïES\n')
  
  const userEmail = 'rodrigues2205@icloud.com'
  const userPassword = 'Nnyq2122@@'
  
  try {
    // 1. VERIFICAR LOGIN COM CREDENCIAIS ESPEC√çFICAS
    log('1. VERIFICANDO LOGIN COM CREDENCIAIS ESPEC√çFICAS...', 'step')
    
    // Buscar usu√°rio matriz
    const { data: matrixUser, error: matrixError } = await supabase
      .from('matrix_users')
      .select('*')
      .eq('email', userEmail)
      .single()
    
    if (matrixError || !matrixUser) {
      log('‚ùå Usu√°rio n√£o encontrado em matrix_users', 'error')
      console.log(`   Erro: ${matrixError?.message}`)
      return
    }
    
    log(`‚úÖ Usu√°rio encontrado: ${matrixUser.name}`, 'success')
    console.log(`   Email: ${matrixUser.email}`)
    console.log(`   Role: ${matrixUser.role}`)
    console.log(`   Ativo: ${matrixUser.is_active}`)
    
    // Verificar senha
    log('   Verificando senha...', 'step')
    if (!matrixUser.password_hash) {
      log('‚ùå Hash de senha n√£o encontrado', 'error')
      return
    }
    
    try {
      const isValidPassword = await bcrypt.compare(userPassword, matrixUser.password_hash)
      if (isValidPassword) {
        log('‚úÖ Senha verificada com sucesso', 'success')
      } else {
        log('‚ùå Senha incorreta', 'error')
        console.log('   A senha fornecida n√£o confere com o hash no banco')
        return
      }
    } catch (error) {
      log(`‚ùå Erro ao verificar senha: ${error.message}`, 'error')
      return
    }
    
    // 2. VERIFICAR ROLE E PERMISS√ïES ESPEC√çFICAS PARA SETTINGS
    log('\n2. VERIFICANDO PERMISS√ïES PARA SETTINGS...', 'step')
    
    const { data: roleData, error: roleError } = await supabase
      .from('roles')
      .select('*')
      .eq('name', matrixUser.role)
      .single()
    
    if (roleError) {
      log(`‚ùå Role n√£o encontrado: ${roleError.message}`, 'error')
      return
    }
    
    log(`‚úÖ Role encontrado: ${roleData.name}`, 'success')
    console.log(`   Descri√ß√£o: ${roleData.description}`)
    
    // Verificar permiss√µes espec√≠ficas para settings
    const permissions = roleData.permissions || {}
    const settingsPermissions = [
      'system_settings',
      'system_users',
      'system_roles',
      'system_logs',
      'system_backup'
    ]
    
    log('   Verificando permiss√µes espec√≠ficas...', 'step')
    settingsPermissions.forEach(permission => {
      const hasPermission = permissions[permission] === true
      if (hasPermission) {
        log(`   ‚úÖ ${permission}: ${hasPermission}`, 'success')
      } else {
        log(`   ‚ùå ${permission}: ${hasPermission}`, 'error')
      }
    })
    
    // Verificar se tem pelo menos uma permiss√£o de settings
    const hasAnySettingsPermission = settingsPermissions.some(permission => 
      permissions[permission] === true
    )
    
    if (hasAnySettingsPermission) {
      log('‚úÖ Usu√°rio tem permiss√µes para acessar settings', 'success')
    } else {
      log('‚ùå Usu√°rio N√ÉO tem permiss√µes para acessar settings', 'error')
      console.log('   Este √© provavelmente o motivo do "acesso restrito"')
    }
    
    // 3. VERIFICAR RELACIONAMENTOS E CONTEXTOS
    log('\n3. VERIFICANDO RELACIONAMENTOS E CONTEXTOS...', 'step')
    
    const { data: relationships, error: relError } = await supabase
      .from('matrix_user_contexts')
      .select('*, contexts(name, slug, type)')
      .eq('matrix_user_id', matrixUser.id)
    
    if (relError) {
      log(`‚ùå Erro ao buscar relacionamentos: ${relError.message}`, 'error')
      return
    }
    
    if (relationships && relationships.length > 0) {
      log(`‚úÖ ${relationships.length} relacionamentos encontrados`, 'success')
      relationships.forEach((rel, index) => {
        console.log(`   ${index + 1}. ${rel.contexts?.name} (${rel.contexts?.type})`)
        console.log(`      Pode gerenciar: ${rel.can_manage ? '‚úÖ' : '‚ùå'}`)
      })
    } else {
      log('‚ùå Nenhum relacionamento encontrado', 'error')
      console.log('   Isso pode causar problemas de acesso')
    }
    
    // 4. SIMULAR DADOS DE SESS√ÉO COMPLETOS
    log('\n4. SIMULANDO DADOS DE SESS√ÉO COMPLETOS...', 'step')
    
    const sessionUser = {
      id: matrixUser.id,
      email: matrixUser.email,
      name: matrixUser.name,
      role: matrixUser.role,
      role_name: matrixUser.role,
      department: matrixUser.department,
      avatar_url: matrixUser.avatar_url,
      permissions: permissions,
      userType: 'matrix',
      context_id: relationships?.[0]?.contexts?.id,
      context_name: relationships?.[0]?.contexts?.name,
      context_slug: relationships?.[0]?.contexts?.slug,
      context_type: relationships?.[0]?.contexts?.type,
      availableContexts: relationships?.map(rel => ({
        id: rel.contexts.id,
        name: rel.contexts.name,
        slug: rel.contexts.slug,
        type: rel.contexts.type,
        canManage: rel.can_manage
      })) || []
    }
    
    log('‚úÖ Dados de sess√£o simulados', 'success')
    console.log('\nüìã DADOS DE SESS√ÉO:')
    console.log(`   Nome: ${sessionUser.name}`)
    console.log(`   Email: ${sessionUser.email}`)
    console.log(`   Role: ${sessionUser.role}`)
    console.log(`   UserType: ${sessionUser.userType}`)
    console.log(`   Contextos: ${sessionUser.availableContexts.length}`)
    console.log(`   Permiss√µes: ${Object.keys(sessionUser.permissions).length}`)
    
    // 5. VERIFICAR SE O USU√ÅRIO DEVERIA TER ACESSO
    log('\n5. VERIFICANDO SE USU√ÅRIO DEVERIA TER ACESSO...', 'step')
    
    const shouldHaveAccess = 
      matrixUser.is_active &&
      matrixUser.role === 'admin' &&
      hasAnySettingsPermission &&
      relationships && relationships.length > 0
    
    if (shouldHaveAccess) {
      log('‚úÖ Usu√°rio DEVERIA ter acesso √†s configura√ß√µes', 'success')
      console.log('   Todos os requisitos est√£o atendidos')
    } else {
      log('‚ùå Usu√°rio N√ÉO deveria ter acesso √†s configura√ß√µes', 'error')
      console.log('   Alguns requisitos n√£o est√£o atendidos:')
      console.log(`   - Ativo: ${matrixUser.is_active ? '‚úÖ' : '‚ùå'}`)
      console.log(`   - Role admin: ${matrixUser.role === 'admin' ? '‚úÖ' : '‚ùå'}`)
      console.log(`   - Permiss√µes settings: ${hasAnySettingsPermission ? '‚úÖ' : '‚ùå'}`)
      console.log(`   - Relacionamentos: ${relationships && relationships.length > 0 ? '‚úÖ' : '‚ùå'}`)
    }
    
    // 6. DIAGN√ìSTICO E SOLU√á√ïES
    console.log('\nüìä DIAGN√ìSTICO:')
    console.log('=' * 50)
    
    const problems = []
    const solutions = []
    
    if (!matrixUser.is_active) {
      problems.push('‚ùå Usu√°rio est√° inativo')
      solutions.push('‚úÖ Ativar usu√°rio no banco de dados')
    }
    
    if (matrixUser.role !== 'admin') {
      problems.push('‚ùå Usu√°rio n√£o √© admin')
      solutions.push('‚úÖ Alterar role para admin no banco de dados')
    }
    
    if (!hasAnySettingsPermission) {
      problems.push('‚ùå Usu√°rio n√£o tem permiss√µes para settings')
      solutions.push('‚úÖ Adicionar permiss√µes de settings ao role admin')
    }
    
    if (!relationships || relationships.length === 0) {
      problems.push('‚ùå Usu√°rio n√£o tem relacionamentos com contextos')
      solutions.push('‚úÖ Criar relacionamentos matrix_user_contexts')
    }
    
    if (problems.length > 0) {
      console.log('\n‚ö†Ô∏è PROBLEMAS IDENTIFICADOS:')
      problems.forEach((problem, index) => {
        console.log(`${index + 1}. ${problem}`)
      })
      
      console.log('\nüí° SOLU√á√ïES:')
      solutions.forEach((solution, index) => {
        console.log(`${index + 1}. ${solution}`)
      })
    } else {
      console.log('\n‚úÖ NENHUM PROBLEMA IDENTIFICADO')
      console.log('O usu√°rio deveria ter acesso √†s configura√ß√µes.')
      console.log('O problema pode estar no c√≥digo da aplica√ß√£o.')
    }
    
    // 7. INFORMA√á√ïES PARA DEBUG
    console.log('\nüîß INFORMA√á√ïES PARA DEBUG:')
    console.log(`   Email: ${userEmail}`)
    console.log(`   Senha: ${userPassword} (verificada)`)
    console.log(`   Role: ${matrixUser.role}`)
    console.log(`   Permiss√µes settings: ${hasAnySettingsPermission}`)
    console.log(`   Relacionamentos: ${relationships?.length || 0}`)
    
  } catch (error) {
    log(`Erro cr√≠tico: ${error.message}`, 'error')
    console.error(error)
  }
}

// Executar debug espec√≠fico
debugSettingsAccess()
