#!/usr/bin/env node

/**
 * DIAGN√ìSTICO COMPLETO - SELETOR M√öLTIPLO
 * 
 * Este script diagnostica problemas com:
 * 1. Layout do seletor
 * 2. Organiza√ß√µes n√£o aparecendo
 * 3. Erro ao selecionar m√∫ltiplos clientes
 * 4. Problemas de contexto
 */

import { createClient } from '@supabase/supabase-js'

// =====================================================
// CONFIGURA√á√ÉO
// =====================================================

const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://eyfvvximmeqmwdfqzqov.supabase.co'
const SUPABASE_ANON_KEY = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImV5ZnZ2eGltbWVxbXdkZnF6cW92Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTY1ODUxODYsImV4cCI6MjA3MjE2MTE4Nn0.ht9a6MmtkfE5hVRmwpfyMcW24a4R7n-9hoW6eYd3K2w'
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImV5ZnZ2eGltbWVxbXdkZnF6cW92Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NjU4NTE4NiwiZXhwIjoyMDcyMTYxMTg2fQ.uSItau5HKn79j6-dyFE_kyHEbGk7wrq64zrIVYxsVkw'

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY)
const supabaseAdmin = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY)

// =====================================================
// FUN√á√ïES DE DIAGN√ìSTICO
// =====================================================

async function diagnoseUserContexts() {
  console.log('üîç DIAGN√ìSTICO 1: Contextos do Usu√°rio')
  console.log('=' * 50)
  
  try {
    // Buscar dados do usu√°rio
    const { data: userData, error: userError } = await supabaseAdmin
      .from('users')
      .select('id, email, name, role, user_type, context_id, context_name, context_type')
      .eq('email', 'rodrigues2205@icloud.com')
      .single()

    if (userError) {
      console.error('‚ùå Erro ao buscar usu√°rio:', userError)
      return
    }

    console.log('üìä Dados do usu√°rio:', {
      id: userData.id,
      email: userData.email,
      name: userData.name,
      role: userData.role,
      user_type: userData.user_type,
      context_id: userData.context_id,
      context_name: userData.context_name,
      context_type: userData.context_type
    })

    // Buscar contextos associados
    const { data: userContexts, error: contextsError } = await supabaseAdmin
      .from('user_contexts')
      .select('context_id, contexts(id, name, slug, type)')
      .eq('user_id', userData.id)

    if (contextsError) {
      console.error('‚ùå Erro ao buscar contextos:', contextsError)
      return
    }

    console.log('üìä Contextos associados:', userContexts)

    // Verificar se todos os contextos est√£o corretos
    const contextIds = userContexts.map(uc => uc.context_id)
    console.log('üìä IDs dos contextos:', contextIds)

    // Buscar detalhes de cada contexto
    for (const userContext of userContexts) {
      const { data: contextDetails, error: detailError } = await supabaseAdmin
        .from('contexts')
        .select('id, name, slug, type, is_active')
        .eq('id', userContext.context_id)
        .single()

      if (detailError) {
        console.error(`‚ùå Erro ao buscar contexto ${userContext.context_id}:`, detailError)
      } else {
        console.log(`‚úÖ Contexto ${contextDetails.name}:`, contextDetails)
      }
    }

  } catch (error) {
    console.error('‚ùå Erro no diagn√≥stico de contextos:', error)
  }
}

async function diagnoseMultiClientAPI() {
  console.log('\nüîç DIAGN√ìSTICO 2: API Multi-Client')
  console.log('=' * 50)
  
  try {
    // Simular chamada para API multi-client
    const testContextIds = ['fa4a4a34-f662-4da1-94d8-b77b5c578d6b', 'a7791594-c44d-47aa-8ddd-97ecfb6cc8ed']
    
    console.log('üìä Testando API com context_ids:', testContextIds)
    
    // Testar query direta no banco
    const { data: tickets, error: ticketsError } = await supabaseAdmin
      .from('tickets')
      .select('id, ticket_number, title, context_id, contexts(name)')
      .in('context_id', testContextIds)
      .limit(10)

    if (ticketsError) {
      console.error('‚ùå Erro na query de tickets:', ticketsError)
    } else {
      console.log('‚úÖ Tickets encontrados:', tickets.length)
      console.log('üìä Exemplos de tickets:', tickets.slice(0, 3))
    }

    // Testar se a API est√° acess√≠vel
    try {
      const response = await fetch('http://localhost:3000/api/dashboard/multi-client-stats?context_ids=' + testContextIds.join(','))
      if (response.ok) {
        const data = await response.json()
        console.log('‚úÖ API multi-client funcionando:', data)
      } else {
        console.log('‚ùå API multi-client retornou erro:', response.status, response.statusText)
      }
    } catch (apiError) {
      console.log('‚ö†Ô∏è API n√£o acess√≠vel (servidor n√£o rodando):', apiError.message)
    }

  } catch (error) {
    console.error('‚ùå Erro no diagn√≥stico da API:', error)
  }
}

async function diagnoseLayoutIssues() {
  console.log('\nüîç DIAGN√ìSTICO 3: Problemas de Layout')
  console.log('=' * 50)
  
  try {
    // Verificar se os componentes est√£o sendo importados corretamente
    console.log('üìä Verificando imports do MultiClientSelector...')
    
    // Simular verifica√ß√£o de componentes
    const components = [
      'MultiClientSelector',
      'SelectedClientsTags',
      'OrganizationSelector'
    ]
    
    for (const component of components) {
      console.log(`‚úÖ Componente ${component} deve estar dispon√≠vel`)
    }

    // Verificar se h√° conflitos de CSS
    console.log('üìä Verificando poss√≠veis conflitos de CSS...')
    console.log('‚úÖ Verificar se z-index est√° correto para modais')
    console.log('‚úÖ Verificar se posicionamento absolute est√° correto')
    console.log('‚úÖ Verificar se classes Tailwind est√£o aplicadas')

  } catch (error) {
    console.error('‚ùå Erro no diagn√≥stico de layout:', error)
  }
}

async function diagnoseDatabaseIntegrity() {
  console.log('\nüîç DIAGN√ìSTICO 4: Integridade do Banco')
  console.log('=' * 50)
  
  try {
    // Verificar se todas as tabelas necess√°rias existem
    const tables = ['users', 'contexts', 'user_contexts', 'tickets']
    
    for (const table of tables) {
      const { data, error } = await supabaseAdmin
        .from(table)
        .select('*')
        .limit(1)
      
      if (error) {
        console.error(`‚ùå Tabela ${table} com problema:`, error)
      } else {
        console.log(`‚úÖ Tabela ${table} acess√≠vel`)
      }
    }

    // Verificar integridade das associa√ß√µes
    const { data: orphanedContexts, error: orphanError } = await supabaseAdmin
      .from('user_contexts')
      .select('context_id, contexts(id)')
      .is('contexts.id', null)

    if (orphanError) {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel verificar contextos √≥rf√£os:', orphanError.message)
    } else if (orphanedContexts && orphanedContexts.length > 0) {
      console.log('‚ùå Contextos √≥rf√£os encontrados:', orphanedContexts)
    } else {
      console.log('‚úÖ Nenhum contexto √≥rf√£o encontrado')
    }

  } catch (error) {
    console.error('‚ùå Erro no diagn√≥stico do banco:', error)
  }
}

async function diagnoseFrontendIssues() {
  console.log('\nüîç DIAGN√ìSTICO 5: Problemas Frontend')
  console.log('=' * 50)
  
  try {
    console.log('üìä Poss√≠veis problemas identificados:')
    console.log('1. ‚ùå Layout fugindo do padr√£o - Verificar CSS e posicionamento')
    console.log('2. ‚ùå Erro ao selecionar m√∫ltiplos - Verificar estado e handlers')
    console.log('3. ‚ùå Organiza√ß√µes n√£o aparecendo - Verificar contexto e dados')
    console.log('4. ‚ùå Erro de cliente - Verificar console do navegador')
    
    console.log('\nüìä Solu√ß√µes sugeridas:')
    console.log('1. ‚úÖ Ajustar z-index e posicionamento do modal')
    console.log('2. ‚úÖ Verificar handlers de sele√ß√£o m√∫ltipla')
    console.log('3. ‚úÖ Verificar se availableContexts est√° sendo carregado')
    console.log('4. ‚úÖ Adicionar try-catch nos handlers')
    console.log('5. ‚úÖ Verificar se onSelectionChange est√° sendo chamado corretamente')

  } catch (error) {
    console.error('‚ùå Erro no diagn√≥stico frontend:', error)
  }
}

// =====================================================
// EXECU√á√ÉO DO DIAGN√ìSTICO
// =====================================================

async function runDiagnosis() {
  console.log('üöÄ INICIANDO DIAGN√ìSTICO COMPLETO - SELETOR M√öLTIPLO')
  console.log('=' * 80)
  
  const startTime = new Date()
  console.log(`‚è∞ In√≠cio: ${startTime.toISOString()}`)
  
  try {
    await diagnoseUserContexts()
    await diagnoseMultiClientAPI()
    await diagnoseLayoutIssues()
    await diagnoseDatabaseIntegrity()
    await diagnoseFrontendIssues()
    
    console.log('\n' + '=' * 80)
    console.log('üìä RESUMO DO DIAGN√ìSTICO')
    console.log('=' * 80)
    console.log('‚úÖ Diagn√≥stico conclu√≠do com sucesso')
    console.log('üìã Verifique os logs acima para identificar problemas')
    console.log('üîß Implemente as corre√ß√µes sugeridas')
    
  } catch (error) {
    console.error('‚ùå Erro durante o diagn√≥stico:', error)
  }
  
  const endTime = new Date()
  const duration = endTime - startTime
  console.log(`\n‚è∞ Fim: ${endTime.toISOString()}`)
  console.log(`‚è±Ô∏è Dura√ß√£o: ${duration}ms`)
}

// =====================================================
// EXECU√á√ÉO
// =====================================================

if (import.meta.url === `file://${process.argv[1]}`) {
  runDiagnosis().catch(console.error)
}

export { runDiagnosis }
