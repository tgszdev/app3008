import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

dotenv.config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY
const supabase = createClient(supabaseUrl, supabaseKey)

async function debugDesassociacao() {
  const email = 'agro2@agro.com.br'
  
  console.log('\nüîç DEBUG: VERIFICANDO DESASSOCIA√á√ÉO')
  console.log('‚ïê'.repeat(70))
  console.log(`Usu√°rio: ${email}`)
  console.log('‚ïê'.repeat(70))
  
  // 1. Verificar estado atual na tabela users
  const { data: user } = await supabase
    .from('users')
    .select('id, email, user_type, context_id, context_name, context_slug, updated_at')
    .eq('email', email)
    .single()
  
  if (!user) {
    console.log('\n‚ùå Usu√°rio n√£o encontrado!\n')
    return
  }
  
  console.log('\n1Ô∏è‚É£ TABELA: users')
  console.log('‚îÄ'.repeat(70))
  console.log('ID:', user.id)
  console.log('Email:', user.email)
  console.log('User Type:', user.user_type)
  console.log('Context ID:', user.context_id || '‚ö†Ô∏è NULL')
  console.log('Context Name:', user.context_name || '‚ö†Ô∏è NULL')
  console.log('Context Slug:', user.context_slug || '‚ö†Ô∏è NULL')
  console.log('√öltima atualiza√ß√£o:', user.updated_at)
  
  // 2. Verificar associa√ß√µes em user_contexts
  const { data: associations, count } = await supabase
    .from('user_contexts')
    .select('context_id, contexts(id, name, slug, type)', { count: 'exact' })
    .eq('user_id', user.id)
  
  console.log('\n2Ô∏è‚É£ TABELA: user_contexts')
  console.log('‚îÄ'.repeat(70))
  console.log(`Total de associa√ß√µes: ${count}`)
  
  if (associations && associations.length > 0) {
    console.log('\nAssocia√ß√µes encontradas:')
    associations.forEach((assoc, i) => {
      console.log(`  ${i + 1}. ${assoc.contexts.name} (${assoc.context_id})`)
    })
  } else {
    console.log('‚ö†Ô∏è  NENHUMA associa√ß√£o encontrada!')
  }
  
  // 3. AN√ÅLISE DE CONSIST√äNCIA
  console.log('\n3Ô∏è‚É£ AN√ÅLISE DE CONSIST√äNCIA')
  console.log('‚ïê'.repeat(70))
  
  if (count === 0) {
    // N√£o tem associa√ß√µes
    if (user.context_id === null) {
      console.log('‚úÖ CORRETO: Sem associa√ß√µes E users.context_id est√° NULL')
    } else {
      console.log('‚ùå PROBLEMA: Sem associa√ß√µes MAS users.context_id ainda est√° preenchido!')
      console.log('   ‚îî‚îÄ context_id:', user.context_id)
      console.log('   ‚îî‚îÄ context_name:', user.context_name)
      console.log('   ‚îî‚îÄ TRIGGER DELETE N√ÉO FUNCIONOU!')
    }
  } else if (count === 1) {
    // Tem 1 associa√ß√£o
    const assoc = associations[0]
    if (user.context_id === assoc.context_id && 
        user.context_name === assoc.contexts.name &&
        user.context_slug === assoc.contexts.slug) {
      console.log('‚úÖ CORRETO: Associa√ß√£o E users table sincronizados')
    } else {
      console.log('‚ùå PROBLEMA: Associa√ß√£o existe MAS users table est√° dessincrono!')
      console.log('\n   Esperado (de user_contexts):')
      console.log('      context_id:', assoc.context_id)
      console.log('      context_name:', assoc.contexts.name)
      console.log('      context_slug:', assoc.contexts.slug)
      console.log('\n   Atual (em users):')
      console.log('      context_id:', user.context_id)
      console.log('      context_name:', user.context_name)
      console.log('      context_slug:', user.context_slug)
    }
  } else {
    console.log(`‚ö†Ô∏è  ATEN√á√ÉO: Usu√°rio context tem ${count} associa√ß√µes (esperado: 1)`)
  }
  
  // 4. Verificar se API bloquearia acesso
  console.log('\n4Ô∏è‚É£ TESTE: API bloquearia acesso a tickets?')
  console.log('‚îÄ'.repeat(70))
  
  if (user.context_id) {
    console.log(`API usaria context_id do banco: ${user.context_id}`)
    
    // Contar tickets desse contexto
    const { count: ticketsCount } = await supabase
      .from('tickets')
      .select('*', { count: 'exact', head: true })
      .eq('context_id', user.context_id)
    
    console.log(`Tickets vis√≠veis: ${ticketsCount}`)
    
    if (count === 0) {
      console.log('\n‚ùå PROBLEMA GRAVE:')
      console.log('   - Usu√°rio N√ÉO tem associa√ß√µes')
      console.log('   - MAS users.context_id ainda aponta para Cliente 03')
      console.log('   - API vai buscar tickets do Cliente 03')
      console.log('   - Usu√°rio V√ä dados que N√ÉO DEVERIA!')
    }
  } else {
    console.log('users.context_id est√° NULL')
    console.log('API bloquearia todos os tickets ‚úÖ')
  }
  
  console.log('\n' + '‚ïê'.repeat(70) + '\n')
}

debugDesassociacao()

