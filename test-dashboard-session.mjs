#!/usr/bin/env node

import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

dotenv.config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o encontradas')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function testDashboardSession() {
  console.log('üîç TESTANDO SESS√ÉO DO DASHBOARD')
  console.log('=' .repeat(50))

  try {
    // 1. Simular dados que a API deveria receber
    console.log('\n1Ô∏è‚É£ SIMULANDO DADOS DA API...')
    
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('email', 'rodrigues2205@icloud.com')
      .single()

    if (userError) {
      console.log('‚ùå Usu√°rio n√£o encontrado:', userError.message)
      return
    }

    console.log('‚úÖ Usu√°rio encontrado:')
    console.log(`  - ID: ${user.id}`)
    console.log(`  - Email: ${user.email}`)
    console.log(`  - User Type: ${user.user_type}`)
    console.log(`  - Role: ${user.role}`)

    // 2. Simular a l√≥gica da API de estat√≠sticas
    console.log('\n2Ô∏è‚É£ SIMULANDO L√ìGICA DA API DE ESTAT√çSTICAS...')
    
    const currentUserId = user.id
    const userRole = user.role || 'user'
    const userType = user.user_type
    const userContextId = user.context_id

    // Buscar contextos associados
    const { data: userContexts, error: userContextsError } = await supabase
      .from('user_contexts')
      .select('context_id')
      .eq('user_id', currentUserId)

    if (userContextsError) {
      console.log('‚ùå Erro ao buscar contextos:', userContextsError.message)
      return
    }

    console.log('‚úÖ Contextos associados:', userContexts.length)
    userContexts.forEach(uc => {
      console.log(`  - Context ID: ${uc.context_id}`)
    })

    // 3. Simular filtro de tickets
    console.log('\n3Ô∏è‚É£ SIMULANDO FILTRO DE TICKETS...')
    
    let query = supabase
      .from('tickets')
      .select('id, status, created_at, updated_at, created_by, is_internal, context_id')
    
    // Aplicar filtro multi-tenant
    if (userType === 'context' && userContextId) {
      console.log('üîç Aplicando filtro de contexto √∫nico...')
      query = query.eq('context_id', userContextId)
    } else if (userType === 'matrix') {
      console.log('üîç Aplicando filtro de m√∫ltiplos contextos...')
      
      if (userContexts && userContexts.length > 0) {
        const associatedContextIds = userContexts.map(uc => uc.context_id)
        console.log('üìã Contextos associados:', associatedContextIds)
        query = query.in('context_id', associatedContextIds)
      } else {
        console.log('‚ö†Ô∏è Nenhum contexto associado - retornando 0 tickets')
        query = query.eq('context_id', '00000000-0000-0000-0000-000000000000')
      }
    }

    const { data: tickets, error: ticketsError } = await query

    if (ticketsError) {
      console.log('‚ùå Erro ao buscar tickets:', ticketsError.message)
    } else {
      console.log('‚úÖ Tickets encontrados:', tickets?.length || 0)
      
      if (tickets && tickets.length > 0) {
        // Calcular estat√≠sticas
        const totalTickets = tickets.length
        const openTickets = tickets.filter(t => t.status === 'open').length
        const inProgressTickets = tickets.filter(t => t.status === 'in_progress').length
        const resolvedTickets = tickets.filter(t => t.status === 'resolved').length
        const cancelledTickets = tickets.filter(t => t.status === 'cancelled').length

        console.log('üìä Estat√≠sticas calculadas:')
        console.log(`  - Total: ${totalTickets}`)
        console.log(`  - Abertos: ${openTickets}`)
        console.log(`  - Em Progresso: ${inProgressTickets}`)
        console.log(`  - Resolvidos: ${resolvedTickets}`)
        console.log(`  - Cancelados: ${cancelledTickets}`)

        // Mostrar tickets por contexto
        console.log('\nüìã Tickets por contexto:')
        const contextGroups = {}
        tickets.forEach(ticket => {
          const contextId = ticket.context_id || 'null'
          if (!contextGroups[contextId]) {
            contextGroups[contextId] = []
          }
          contextGroups[contextId].push(ticket)
        })

        Object.entries(contextGroups).forEach(([contextId, contextTickets]) => {
          console.log(`  Contexto ${contextId}: ${contextTickets.length} tickets`)
          contextTickets.slice(0, 2).forEach(ticket => {
            console.log(`    - ${ticket.title}: ${ticket.status}`)
          })
        })
      }
    }

    // 4. Verificar se o problema √© de sess√£o
    console.log('\n4Ô∏è‚É£ VERIFICANDO PROBLEMA DE SESS√ÉO...')
    
    console.log('üîç Poss√≠veis causas do erro 401:')
    console.log('  1. Sess√£o do NextAuth n√£o est√° sendo criada')
    console.log('  2. Cookies de sess√£o n√£o est√£o sendo enviados')
    console.log('  3. Configura√ß√£o do NextAuth est√° incorreta')
    console.log('  4. Middleware est√° bloqueando (mas voc√™ disse que n√£o usa)')

    // 5. Testar se conseguimos acessar a API diretamente
    console.log('\n5Ô∏è‚É£ TESTANDO ACESSO DIRETO √Ä API...')
    
    try {
      const response = await fetch('https://www.ithostbr.tech/api/dashboard/stats', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        }
      })
      
      const data = await response.json()
      console.log('üì° Resposta da API:', response.status)
      console.log('üìä Dados:', data)
      
      if (response.status === 401) {
        console.log('‚úÖ Confirmado: API est√° retornando 401 (problema de autentica√ß√£o)')
        console.log('üîß SOLU√á√ÉO: Verificar se a sess√£o est√° sendo criada corretamente')
      } else {
        console.log('‚ö†Ô∏è API n√£o est√° retornando 401 - problema diferente')
      }
    } catch (error) {
      console.log('‚ùå Erro ao testar API:', error.message)
    }

    // 6. Diagn√≥stico final
    console.log('\n6Ô∏è‚É£ DIAGN√ìSTICO FINAL...')
    
    console.log('üìä RESUMO:')
    console.log(`  - Usu√°rio: ${user.email}`)
    console.log(`  - User Type: ${user.user_type}`)
    console.log(`  - Associa√ß√µes: ${userContexts?.length || 0}`)
    console.log(`  - Tickets acess√≠veis: ${tickets?.length || 0}`)

    console.log('\nüéØ PROBLEMA IDENTIFICADO:')
    console.log('‚ùå As APIs do dashboard est√£o retornando 401 Unauthorized')
    console.log('üîç CAUSA: Sess√£o do NextAuth n√£o est√° sendo reconhecida')
    console.log('üîß SOLU√á√ÉO: Verificar configura√ß√£o do NextAuth ou criar bypass tempor√°rio')

  } catch (error) {
    console.error('‚ùå Erro geral:', error)
  }
}

testDashboardSession()
