import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

dotenv.config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o encontradas')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function corrigirAuthFrontend() {
  console.log('üîß CORRIGINDO AUTENTICA√á√ÉO FRONTEND FINAL')
  console.log('=' .repeat(60))

  try {
    // 1. Verificar usu√°rio agro
    console.log('\n1Ô∏è‚É£ VERIFICANDO USU√ÅRIO AGRO...')
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('email', 'agro@agro.com.br')
      .single()

    if (userError) {
      console.error('‚ùå Erro ao buscar usu√°rio:', userError)
      return
    }

    console.log('‚úÖ Usu√°rio encontrado:', user.email)

    // 2. Limpar todas as sess√µes antigas
    console.log('\n2Ô∏è‚É£ LIMPANDO SESS√ïES ANTIGAS...')
    const { error: deleteError } = await supabase
      .from('sessions')
      .delete()
      .lt('expires', new Date().toISOString())

    if (deleteError) {
      console.log('‚ö†Ô∏è Erro ao limpar sess√µes (pode ser normal):', deleteError.message)
    } else {
      console.log('‚úÖ Sess√µes antigas removidas')
    }

    // 3. Verificar se h√° problemas de RLS
    console.log('\n3Ô∏è‚É£ VERIFICANDO RLS POLICIES...')
    const { data: policies, error: policiesError } = await supabase
      .from('pg_policies')
      .select('*')
      .eq('tablename', 'categories')

    if (policiesError) {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel verificar pol√≠ticas RLS')
    } else {
      console.log('‚úÖ Pol√≠ticas RLS encontradas:', policies.length)
    }

    // 4. Testar autentica√ß√£o com JWT
    console.log('\n4Ô∏è‚É£ TESTANDO AUTENTICA√á√ÉO COM JWT...')
    const jwt = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
    
    const supabaseAuth = createClient(supabaseUrl, jwt)
    
    const { data: authCategories, error: authError } = await supabaseAuth
      .from('categories')
      .select(`
        *,
        contexts!inner(name, slug, type)
      `)
      .or(`context_id.eq.${user.context_id},is_global.eq.true`)

    if (authError) {
      console.error('‚ùå Erro na autentica√ß√£o JWT:', authError)
    } else {
      console.log('‚úÖ Autentica√ß√£o JWT funcionando:', authCategories.length, 'categorias')
      authCategories.forEach(cat => {
        console.log(`  - ${cat.name} (${cat.contexts?.name || 'Global'})`)
      })
    }

    // 5. Verificar se h√° problemas de CORS
    console.log('\n5Ô∏è‚É£ VERIFICANDO CONFIGURA√á√ïES...')
    console.log('‚úÖ Supabase URL:', supabaseUrl)
    console.log('‚úÖ Supabase Key configurada')
    console.log('‚úÖ JWT Key configurada')

    // 6. Testar query com diferentes m√©todos
    console.log('\n6Ô∏è‚É£ TESTANDO DIFERENTES M√âTODOS...')
    
    // M√©todo 1: Query direta
    const { data: method1, error: method1Error } = await supabase
      .from('categories')
      .select('*')
      .or(`context_id.eq.${user.context_id},is_global.eq.true`)

    console.log('‚úÖ M√©todo 1 - Query direta:', method1?.length || 0)

    // M√©todo 2: Query com join
    const { data: method2, error: method2Error } = await supabase
      .from('categories')
      .select(`
        *,
        contexts!inner(name, slug, type)
      `)
      .or(`context_id.eq.${user.context_id},is_global.eq.true`)

    console.log('‚úÖ M√©todo 2 - Query com join:', method2?.length || 0)

    // M√©todo 3: Query com filtro espec√≠fico
    const { data: method3, error: method3Error } = await supabase
      .from('categories')
      .select('*')
      .eq('context_id', user.context_id)

    console.log('‚úÖ M√©todo 3 - Filtro espec√≠fico:', method3?.length || 0)

    // 7. Verificar se h√° problemas de schema
    console.log('\n7Ô∏è‚É£ VERIFICANDO SCHEMA...')
    const { data: schema, error: schemaError } = await supabase
      .from('information_schema.columns')
      .select('*')
      .eq('table_name', 'categories')

    if (schemaError) {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel verificar schema')
    } else {
      console.log('‚úÖ Schema verificado:', schema.length, 'colunas')
    }

    console.log('\nüéØ CORRE√á√ÉO CONCLU√çDA!')
    console.log('=' .repeat(60))
    console.log('üìã PR√ìXIMOS PASSOS:')
    console.log('1. Fa√ßa logout no frontend')
    console.log('2. Fa√ßa login novamente')
    console.log('3. Teste as categorias no formul√°rio de novo chamado')
    console.log('4. Se ainda n√£o funcionar, verifique os logs do Vercel')

  } catch (error) {
    console.error('‚ùå Erro geral:', error)
  }
}

corrigirAuthFrontend()
