#!/usr/bin/env node

console.log('üîç TESTE: Login dos Usu√°rios')
console.log('=====================================')

const testLogin = async (userEmail, userDescription) => {
  try {
    console.log(`\nüë§ Testando login: ${userDescription}`)
    console.log(`üìß Email: ${userEmail}`)
    console.log('‚îÄ'.repeat(50))
    
    // Simular login via API (isso seria feito via NextAuth)
    console.log('üì° Testando endpoint de login...')
    
    // Verificar se h√° endpoint de login
    const loginResponse = await fetch('https://www.ithostbr.tech/api/auth/signin', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: userEmail,
        password: 'test123' // Senha de teste
      })
    })
    
    console.log('üìä Status do login:', loginResponse.status)
    
    if (loginResponse.ok) {
      console.log('‚úÖ Login funcionando')
    } else {
      console.log('‚ùå Login n√£o funcionando:', loginResponse.status)
    }
    
    // Verificar se h√° endpoint de sess√£o
    console.log('\nüì° Testando endpoint de sess√£o...')
    const sessionResponse = await fetch('https://www.ithostbr.tech/api/auth/session')
    
    console.log('üìä Status da sess√£o:', sessionResponse.status)
    
    if (sessionResponse.ok) {
      const sessionData = await sessionResponse.json()
      console.log('‚úÖ Sess√£o encontrada:', !!sessionData.user)
      if (sessionData.user) {
        console.log('üë§ Usu√°rio logado:', sessionData.user.email)
      }
    } else {
      console.log('‚ùå Sess√£o n√£o encontrada')
    }
    
  } catch (error) {
    console.log('‚ùå ERRO:', error.message)
  }
}

const testDashboardAccess = async () => {
  try {
    console.log('\nüè† Testando acesso ao dashboard...')
    console.log('‚îÄ'.repeat(50))
    
    const response = await fetch('https://www.ithostbr.tech/dashboard')
    
    console.log('üìä Status do dashboard:', response.status)
    console.log('üìä Headers:', Object.fromEntries(response.headers.entries()))
    
    if (response.ok) {
      const html = await response.text()
      
      if (html.includes('Dashboard')) {
        console.log('‚úÖ Dashboard carregou: "Dashboard" encontrado')
      } else {
        console.log('‚ùå Dashboard n√£o carregou corretamente')
      }
      
      if (html.includes('login')) {
        console.log('‚ùå PROBLEMA: P√°gina cont√©m "login" - redirecionamento')
      } else {
        console.log('‚úÖ N√£o h√° redirecionamento para login')
      }
      
    } else {
      console.log('‚ùå ERRO ao acessar dashboard:', response.status)
    }
    
  } catch (error) {
    console.log('‚ùå ERRO:', error.message)
  }
}

const testNewTicketAccess = async () => {
  try {
    console.log('\nüé´ Testando acesso ao formul√°rio de novo ticket...')
    console.log('‚îÄ'.repeat(50))
    
    const response = await fetch('https://www.ithostbr.tech/dashboard/tickets/new')
    
    console.log('üìä Status do novo ticket:', response.status)
    console.log('üìä Headers:', Object.fromEntries(response.headers.entries()))
    
    if (response.ok) {
      const html = await response.text()
      
      if (html.includes('Novo Chamado')) {
        console.log('‚úÖ Formul√°rio carregou: "Novo Chamado" encontrado')
      } else {
        console.log('‚ùå Formul√°rio n√£o carregou corretamente')
      }
      
      if (html.includes('Nenhuma categoria dispon√≠vel')) {
        console.log('‚ùå PROBLEMA: "Nenhuma categoria dispon√≠vel" encontrado')
      } else {
        console.log('‚úÖ N√£o h√° erro de categorias')
      }
      
      if (html.includes('Carregando categorias')) {
        console.log('‚úÖ JavaScript de carregamento encontrado')
      } else {
        console.log('‚ùå JavaScript de carregamento n√£o encontrado')
      }
      
    } else {
      console.log('‚ùå ERRO ao acessar formul√°rio:', response.status)
    }
    
  } catch (error) {
    console.log('‚ùå ERRO:', error.message)
  }
}

// Executar testes
const runTests = async () => {
  // Teste 1: Usu√°rio rodrigues2205@icloud.com
  await testLogin('rodrigues2205@icloud.com', 'Rodrigues (Matrix User)')
  
  // Teste 2: Usu√°rio agro2@agro.com.br
  await testLogin('agro2@agro.com.br', 'Agro2 (Context User)')
  
  // Teste 3: Acesso ao dashboard
  await testDashboardAccess()
  
  // Teste 4: Acesso ao formul√°rio de novo ticket
  await testNewTicketAccess()
  
  console.log('\nüèÅ Testes de login conclu√≠dos!')
}

runTests()
