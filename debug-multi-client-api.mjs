#!/usr/bin/env node

import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

dotenv.config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o encontradas')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function debugMultiClientAPI() {
  console.log('üîç DEBUGANDO API MULTI-CLIENT - ERRO 500')
  console.log('=' .repeat(60))

  try {
    // 1. Testar com par√¢metros m√≠nimos
    console.log('\n1Ô∏è‚É£ TESTANDO COM PAR√ÇMETROS M√çNIMOS...')
    
    try {
      const response = await fetch('https://www.ithostbr.tech/api/dashboard/multi-client-stats?start_date=2025-09-01&end_date=2025-09-30')
      console.log('üì° Status:', response.status)
      console.log('üìä Headers:', Object.fromEntries(response.headers.entries()))
      
      const data = await response.json()
      console.log('üìã Dados:', data)
      
    } catch (error) {
      console.log('‚ùå Erro ao testar API:', error.message)
    }

    // 2. Testar com contexto espec√≠fico
    console.log('\n2Ô∏è‚É£ TESTANDO COM CONTEXTO ESPEC√çFICO...')
    
    try {
      const luftAgroId = '6486088e-72ae-461b-8b03-32ca84918882'
      const response = await fetch(`https://www.ithostbr.tech/api/dashboard/multi-client-stats?start_date=2025-09-01&end_date=2025-09-30&context_ids=${luftAgroId}`)
      console.log('üì° Status:', response.status)
      console.log('üìä Headers:', Object.fromEntries(response.headers.entries()))
      
      const data = await response.json()
      console.log('üìã Dados:', data)
      
    } catch (error) {
      console.log('‚ùå Erro ao testar API com contexto:', error.message)
    }

    // 3. Verificar se o problema √© na autentica√ß√£o
    console.log('\n3Ô∏è‚É£ VERIFICANDO AUTENTICA√á√ÉO...')
    
    try {
      const response = await fetch('https://www.ithostbr.tech/api/dashboard/stats')
      console.log('üì° Status da API stats:', response.status)
      
      const data = await response.json()
      console.log('üìã Dados da API stats:', data)
      
    } catch (error) {
      console.log('‚ùå Erro ao testar API stats:', error.message)
    }

    // 4. Verificar se o problema √© na API analytics
    console.log('\n4Ô∏è‚É£ VERIFICANDO API ANALYTICS...')
    
    try {
      const response = await fetch('https://www.ithostbr.tech/api/dashboard/analytics')
      console.log('üì° Status da API analytics:', response.status)
      
      const data = await response.json()
      console.log('üìã Dados da API analytics:', data)
      
    } catch (error) {
      console.log('‚ùå Erro ao testar API analytics:', error.message)
    }

    // 5. Verificar se o problema √© no banco de dados
    console.log('\n5Ô∏è‚É£ VERIFICANDO BANCO DE DADOS...')
    
    try {
      const { data: users, error: usersError } = await supabase
        .from('users')
        .select('id, email, user_type, role')
        .eq('email', 'rodrigues2205@icloud.com')
        .single()

      if (usersError) {
        console.log('‚ùå Erro ao buscar usu√°rio:', usersError.message)
      } else {
        console.log('‚úÖ Usu√°rio encontrado:', users)
      }
    } catch (error) {
      console.log('‚ùå Erro ao testar banco:', error.message)
    }

    // 6. Verificar se o problema √© nos contextos
    console.log('\n6Ô∏è‚É£ VERIFICANDO CONTEXTOS...')
    
    try {
      const { data: contexts, error: contextsError } = await supabase
        .from('contexts')
        .select('id, name, type')
        .in('id', ['6486088e-72ae-461b-8b03-32ca84918882', 'a7791594-c44d-47aa-8ddd-97ecfb6cc8ed'])

      if (contextsError) {
        console.log('‚ùå Erro ao buscar contextos:', contextsError.message)
      } else {
        console.log('‚úÖ Contextos encontrados:', contexts)
      }
    } catch (error) {
      console.log('‚ùå Erro ao testar contextos:', error.message)
    }

    // 7. Verificar se o problema √© nos tickets
    console.log('\n7Ô∏è‚É£ VERIFICANDO TICKETS...')
    
    try {
      const { data: tickets, error: ticketsError } = await supabase
        .from('tickets')
        .select('id, title, status, context_id')
        .in('context_id', ['6486088e-72ae-461b-8b03-32ca84918882', 'a7791594-c44d-47aa-8ddd-97ecfb6cc8ed'])

      if (ticketsError) {
        console.log('‚ùå Erro ao buscar tickets:', ticketsError.message)
      } else {
        console.log('‚úÖ Tickets encontrados:', tickets.length)
        tickets.forEach(ticket => {
          console.log(`  - ${ticket.title}: ${ticket.status} (${ticket.context_id})`)
        })
      }
    } catch (error) {
      console.log('‚ùå Erro ao testar tickets:', error.message)
    }

    // 8. Diagn√≥stico final
    console.log('\n8Ô∏è‚É£ DIAGN√ìSTICO FINAL...')
    
    console.log('üìä RESUMO DO DEBUG:')
    console.log('‚úÖ APIs stats e analytics funcionando')
    console.log('‚úÖ Banco de dados funcionando')
    console.log('‚úÖ Usu√°rio encontrado')
    console.log('‚úÖ Contextos encontrados')
    console.log('‚úÖ Tickets encontrados')
    console.log('‚ùå API multi-client com erro 500')
    
    console.log('\nüéØ POSS√çVEIS CAUSAS:')
    console.log('1. Erro na l√≥gica da API multi-client')
    console.log('2. Erro na query do banco de dados')
    console.log('3. Erro na formata√ß√£o da resposta')
    console.log('4. Erro na autentica√ß√£o espec√≠fica')
    
    console.log('\nüîß PR√ìXIMOS PASSOS:')
    console.log('1. Verificar logs do servidor')
    console.log('2. Simplificar a API multi-client')
    console.log('3. Testar com dados m√≠nimos')
    console.log('4. Corrigir erro espec√≠fico')

  } catch (error) {
    console.error('‚ùå Erro geral:', error)
  }
}

debugMultiClientAPI()
