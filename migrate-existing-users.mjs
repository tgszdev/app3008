#!/usr/bin/env node

/**
 * MIGRA√á√ÉO DE USU√ÅRIOS EXISTENTES PARA MULTI-TENANT
 * =================================================
 * 
 * Este script:
 * 1. Migra usu√°rios admin/analyst existentes para matrix_users
 * 2. Migra usu√°rios user existentes para context_users
 * 3. Cria contexto padr√£o para usu√°rios migrados
 * 4. Preserva todos os dados existentes
 */

import { createClient } from '@supabase/supabase-js'
import bcrypt from 'bcryptjs'
import dotenv from 'dotenv'

// Carregar vari√°veis de ambiente
dotenv.config({ path: '.env.local' })

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas!')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    persistSession: false,
    autoRefreshToken: false,
    detectSessionInUrl: false,
  },
})

// Fun√ß√£o para log
function log(message, type = 'info') {
  const timestamp = new Date().toISOString()
  const icons = {
    info: '‚ÑπÔ∏è',
    success: '‚úÖ',
    error: '‚ùå',
    warning: '‚ö†Ô∏è',
    step: 'üîÑ'
  }
  console.log(`${icons[type]} [${timestamp}] ${message}`)
}

async function migrateUsers() {
  console.log('üöÄ INICIANDO MIGRA√á√ÉO DE USU√ÅRIOS EXISTENTES\n')
  
  try {
    // 1. Buscar todos os usu√°rios existentes
    log('1. Buscando usu√°rios existentes...', 'step')
    
    const { data: existingUsers, error: usersError } = await supabase
      .from('users')
      .select('*')
      .order('created_at', { ascending: true })
    
    if (usersError) {
      log(`Erro ao buscar usu√°rios: ${usersError.message}`, 'error')
      return
    }
    
    log(`Encontrados ${existingUsers?.length || 0} usu√°rios para migra√ß√£o`, 'success')
    
    if (!existingUsers || existingUsers.length === 0) {
      log('Nenhum usu√°rio encontrado para migra√ß√£o', 'warning')
      return
    }
    
    // 2. Verificar se as tabelas multi-tenant existem
    log('2. Verificando tabelas multi-tenant...', 'step')
    
    const { data: contextsCheck } = await supabase.from('contexts').select('id').limit(1)
    const { data: matrixUsersCheck } = await supabase.from('matrix_users').select('id').limit(1)
    const { data: contextUsersCheck } = await supabase.from('context_users').select('id').limit(1)
    
    if (!contextsCheck) {
      log('‚ùå Tabela contexts n√£o existe. Execute o schema multi-tenant primeiro!', 'error')
      console.log('\nüìã INSTRU√á√ïES:')
      console.log('1. Acesse o Supabase Dashboard')
      console.log('2. V√° em SQL Editor')
      console.log('3. Execute o conte√∫do do arquivo: multi-tenant-hybrid-schema.sql')
      console.log('4. Execute este script novamente')
      return
    }
    
    log('‚úÖ Tabelas multi-tenant existem', 'success')
    
    // 3. Criar contexto padr√£o se n√£o existir
    log('3. Verificando contexto padr√£o...', 'step')
    
    let defaultContextId = null
    const { data: defaultContext } = await supabase
      .from('contexts')
      .select('id')
      .eq('slug', 'default-organization')
      .single()
    
    if (defaultContext) {
      defaultContextId = defaultContext.id
      log('‚úÖ Contexto padr√£o j√° existe', 'success')
    } else {
      // Criar contexto padr√£o
      const { data: newContext, error: contextError } = await supabase
        .from('contexts')
        .insert({
          name: 'Organiza√ß√£o Padr√£o',
          slug: 'default-organization',
          type: 'organization',
          settings: { description: 'Contexto padr√£o para usu√°rios migrados' },
          sla_hours: 24,
          is_active: true
        })
        .select('id')
        .single()
      
      if (contextError) {
        log(`Erro ao criar contexto padr√£o: ${contextError.message}`, 'error')
        return
      }
      
      defaultContextId = newContext.id
      log('‚úÖ Contexto padr√£o criado', 'success')
    }
    
    // 4. Migrar usu√°rios
    log('4. Iniciando migra√ß√£o de usu√°rios...', 'step')
    
    let matrixUsersCreated = 0
    let contextUsersCreated = 0
    let errors = 0
    
    for (const user of existingUsers) {
      try {
        // Verificar se j√° foi migrado
        const { data: existingMatrix } = await supabase
          .from('matrix_users')
          .select('id')
          .eq('email', user.email)
          .single()
        
        const { data: existingContext } = await supabase
          .from('context_users')
          .select('id')
          .eq('email', user.email)
          .single()
        
        if (existingMatrix || existingContext) {
          log(`Usu√°rio ${user.email} j√° foi migrado`, 'info')
          continue
        }
        
        // Decidir tipo de usu√°rio baseado no role
        const isMatrixUser = ['admin', 'analyst', 'developer', 'dev', 'n2'].includes(user.role)
        
        if (isMatrixUser) {
          // Migrar para matrix_users
          const { error: insertError } = await supabase
            .from('matrix_users')
            .insert({
              id: user.id, // Manter ID original
              email: user.email,
              password_hash: user.password_hash,
              name: user.name,
              role: user.role,
              department: user.department,
              phone: user.phone,
              avatar_url: user.avatar_url,
              is_active: user.is_active,
              last_login: user.last_login,
              created_at: user.created_at,
              updated_at: user.updated_at
            })
          
          if (insertError) {
            log(`Erro ao migrar ${user.email} para matrix_users: ${insertError.message}`, 'error')
            errors++
          } else {
            log(`‚úÖ ${user.email} migrado para matrix_users`, 'success')
            matrixUsersCreated++
          }
        } else {
          // Migrar para context_users
          const { error: insertError } = await supabase
            .from('context_users')
            .insert({
              id: user.id, // Manter ID original
              context_id: defaultContextId,
              email: user.email,
              password_hash: user.password_hash,
              name: user.name,
              role: user.role,
              department: user.department,
              phone: user.phone,
              avatar_url: user.avatar_url,
              is_active: user.is_active,
              last_login: user.last_login,
              created_at: user.created_at,
              updated_at: user.updated_at
            })
          
          if (insertError) {
            log(`Erro ao migrar ${user.email} para context_users: ${insertError.message}`, 'error')
            errors++
          } else {
            log(`‚úÖ ${user.email} migrado para context_users`, 'success')
            contextUsersCreated++
          }
        }
      } catch (error) {
        log(`Erro ao processar usu√°rio ${user.email}: ${error.message}`, 'error')
        errors++
      }
    }
    
    // 5. Atribuir matrix users ao contexto padr√£o
    if (matrixUsersCreated > 0) {
      log('5. Atribuindo usu√°rios matriz ao contexto padr√£o...', 'step')
      
      const { data: matrixUsers } = await supabase
        .from('matrix_users')
        .select('id')
      
      if (matrixUsers) {
        const assignments = matrixUsers.map(mu => ({
          matrix_user_id: mu.id,
          context_id: defaultContextId,
          can_manage: false
        }))
        
        const { error: assignmentError } = await supabase
          .from('matrix_user_contexts')
          .insert(assignments)
        
        if (assignmentError) {
          log(`Erro ao atribuir usu√°rios matriz: ${assignmentError.message}`, 'error')
        } else {
          log(`‚úÖ ${matrixUsers.length} usu√°rios matriz atribu√≠dos ao contexto`, 'success')
        }
      }
    }
    
    // 6. Relat√≥rio final
    console.log('\nüìä RELAT√ìRIO DE MIGRA√á√ÉO:')
    console.log('=' * 50)
    console.log(`‚úÖ Usu√°rios matriz criados: ${matrixUsersCreated}`)
    console.log(`‚úÖ Usu√°rios contexto criados: ${contextUsersCreated}`)
    console.log(`‚ùå Erros encontrados: ${errors}`)
    console.log(`üìã Total processado: ${existingUsers.length}`)
    
    if (errors === 0) {
      console.log('\nüéâ MIGRA√á√ÉO CONCLU√çDA COM SUCESSO!')
      console.log('\nüìã PR√ìXIMOS PASSOS:')
      console.log('1. Teste o login com os usu√°rios migrados')
      console.log('2. Verifique se o dashboard est√° funcionando')
      console.log('3. Teste a troca de contexto (se aplic√°vel)')
    } else {
      console.log('\n‚ö†Ô∏è MIGRA√á√ÉO CONCLU√çDA COM ALGUNS ERROS')
      console.log('Verifique os logs acima para detalhes dos erros')
    }
    
  } catch (error) {
    log(`Erro cr√≠tico na migra√ß√£o: ${error.message}`, 'error')
    console.error(error)
  }
}

// Executar migra√ß√£o
migrateUsers()
