import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

dotenv.config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o encontradas')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function debugNivelUsuario() {
  console.log('üîç DEBUG N√çVEL DO USU√ÅRIO')
  console.log('=' .repeat(50))

  try {
    // 1. Verificar usu√°rio agro
    console.log('\n1Ô∏è‚É£ VERIFICANDO USU√ÅRIO AGRO...')
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('email', 'agro@agro.com.br')
      .single()

    if (userError) {
      console.error('‚ùå Erro ao buscar usu√°rio:', userError)
      return
    }

    console.log('‚úÖ Usu√°rio encontrado:', {
      id: user.id,
      email: user.email,
      user_type: user.user_type,
      context_id: user.context_id,
      role: user.role,
      is_active: user.is_active,
      created_at: user.created_at,
      updated_at: user.updated_at
    })

    // 2. Verificar se o usu√°rio est√° ativo
    console.log('\n2Ô∏è‚É£ VERIFICANDO STATUS DO USU√ÅRIO...')
    if (user.is_active === false) {
      console.log('‚ùå PROBLEMA: Usu√°rio est√° INATIVO!')
      console.log('üîß SOLU√á√ÉO: Ativar usu√°rio no banco de dados')
    } else {
      console.log('‚úÖ Usu√°rio est√° ativo')
    }

    // 3. Verificar n√≠vel de permiss√£o
    console.log('\n3Ô∏è‚É£ VERIFICANDO N√çVEL DE PERMISS√ÉO...')
    console.log(`üìä Role atual: ${user.role}`)
    
    if (user.role === 'user') {
      console.log('‚ö†Ô∏è ATEN√á√ÉO: Usu√°rio com role "user" (n√≠vel baixo)')
      console.log('üîç Isso pode estar causando problemas de RLS')
    } else if (user.role === 'admin') {
      console.log('‚úÖ Usu√°rio com role "admin" (n√≠vel alto)')
    } else if (user.role === 'analyst') {
      console.log('‚úÖ Usu√°rio com role "analyst" (n√≠vel m√©dio)')
    } else {
      console.log(`‚ö†Ô∏è Role desconhecido: ${user.role}`)
    }

    // 4. Verificar se h√° outros usu√°rios com roles diferentes
    console.log('\n4Ô∏è‚É£ VERIFICANDO OUTROS USU√ÅRIOS...')
    const { data: allUsers, error: allUsersError } = await supabase
      .from('users')
      .select('id, email, role, user_type, is_active')
      .order('created_at', { ascending: false })

    if (allUsersError) {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel verificar outros usu√°rios')
    } else {
      console.log('‚úÖ Total de usu√°rios:', allUsers.length)
      console.log('üìã Lista de usu√°rios:')
      allUsers.forEach((u, index) => {
        console.log(`  ${index + 1}. ${u.email}`)
        console.log(`     - Role: ${u.role}`)
        console.log(`     - Tipo: ${u.user_type}`)
        console.log(`     - Ativo: ${u.is_active}`)
        console.log('')
      })
    }

    // 5. Verificar se h√° usu√°rios admin
    console.log('\n5Ô∏è‚É£ VERIFICANDO USU√ÅRIOS ADMIN...')
    const { data: adminUsers, error: adminError } = await supabase
      .from('users')
      .select('*')
      .eq('role', 'admin')

    if (adminError) {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel verificar usu√°rios admin')
    } else {
      console.log('‚úÖ Usu√°rios admin encontrados:', adminUsers.length)
      adminUsers.forEach(admin => {
        console.log(`  - ${admin.email} (${admin.user_type})`)
      })
    }

    // 6. Testar com diferentes roles
    console.log('\n6Ô∏è‚É£ TESTANDO COM DIFERENTES ROLES...')
    
    // Testar se o problema √© espec√≠fico do role 'user'
    const { data: userRoleTest, error: userRoleError } = await supabase
      .from('users')
      .select('*')
      .eq('role', 'user')
      .limit(5)

    if (userRoleError) {
      console.log('‚ùå Erro ao buscar usu√°rios com role "user":', userRoleError.message)
    } else {
      console.log('‚úÖ Usu√°rios com role "user" encontrados:', userRoleTest.length)
    }

    // 7. Verificar se h√° problemas de RLS espec√≠ficos por role
    console.log('\n7Ô∏è‚É£ VERIFICANDO RLS POR ROLE...')
    
    // Testar JWT com usu√°rio agro
    const jwt = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
    const supabaseAuth = createClient(supabaseUrl, jwt)
    
    // Tentar buscar o pr√≥prio usu√°rio
    const { data: selfUser, error: selfError } = await supabaseAuth
      .from('users')
      .select('*')
      .eq('id', user.id)
      .single()

    if (selfError) {
      console.log('‚ùå Erro ao buscar pr√≥prio usu√°rio com JWT:', selfError.message)
      console.log('üîç Isso indica problema de RLS espec√≠fico para role "user"')
    } else {
      console.log('‚úÖ Pr√≥prio usu√°rio encontrado com JWT:', selfUser.email)
    }

    // 8. Verificar se h√° pol√≠ticas RLS espec√≠ficas por role
    console.log('\n8Ô∏è‚É£ VERIFICANDO POL√çTICAS RLS ESPEC√çFICAS...')
    
    // Tentar buscar categorias com JWT
    const { data: authCategories, error: authError } = await supabaseAuth
      .from('categories')
      .select('*')
      .eq('is_global', true)

    if (authError) {
      console.log('‚ùå Erro ao buscar categorias globais com JWT:', authError.message)
      console.log('üîç Isso indica problema de RLS nas categorias tamb√©m')
    } else {
      console.log('‚úÖ Categorias globais encontradas com JWT:', authCategories.length)
    }

    // 9. Diagn√≥stico final
    console.log('\n9Ô∏è‚É£ DIAGN√ìSTICO FINAL...')
    console.log('üìã PROBLEMAS IDENTIFICADOS:')
    
    if (user.role === 'user') {
      console.log('‚ùå 1. Usu√°rio com role "user" (n√≠vel baixo)')
      console.log('   - Pode estar causando problemas de RLS')
      console.log('   - Pol√≠ticas RLS podem estar bloqueando acesso')
    }
    
    if (user.is_active === false) {
      console.log('‚ùå 2. Usu√°rio inativo')
      console.log('   - Usu√°rio pode estar desabilitado')
    }
    
    if (selfError) {
      console.log('‚ùå 3. RLS bloqueando acesso ao pr√≥prio usu√°rio')
      console.log('   - Pol√≠ticas RLS muito restritivas')
    }
    
    if (authError) {
      console.log('‚ùå 4. RLS bloqueando acesso √†s categorias')
      console.log('   - Pol√≠ticas RLS bloqueando categorias')
    }

    console.log('\nüîß SOLU√á√ïES RECOMENDADAS:')
    console.log('1. Executar SQL no Supabase Dashboard para corrigir RLS')
    console.log('2. Verificar se o usu√°rio est√° ativo')
    console.log('3. Considerar alterar role do usu√°rio para "admin" temporariamente')
    console.log('4. Verificar pol√≠ticas RLS espec√≠ficas para role "user"')

  } catch (error) {
    console.error('‚ùå Erro geral:', error)
  }
}

debugNivelUsuario()
