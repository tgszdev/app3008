import { createClient } from '@supabase/supabase-js'
import { config } from 'dotenv'

// Carregar vari√°veis de ambiente
config({ path: '.env.local' })

const supabaseAdmin = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
)

async function corrigirAuthSession() {
  console.log('üîß CORRIGINDO AUTENTICA√á√ÉO')
  console.log('=' * 40)
  
  try {
    // 1. Verificar se h√° sess√µes inv√°lidas
    console.log('\nüîç 1. VERIFICANDO SESS√ïES INV√ÅLIDAS')
    
    const { data: invalidSessions, error: invalidError } = await supabaseAdmin
      .from('sessions')
      .select('*')
      .lt('expires', new Date().toISOString())
    
    if (invalidError) {
      console.error('‚ùå Erro ao buscar sess√µes inv√°lidas:', invalidError)
    } else {
      console.log(`‚úÖ Sess√µes expiradas encontradas: ${invalidSessions?.length || 0}`)
      
      if (invalidSessions && invalidSessions.length > 0) {
        console.log('üßπ Limpando sess√µes expiradas...')
        
        const { error: deleteError } = await supabaseAdmin
          .from('sessions')
          .delete()
          .lt('expires', new Date().toISOString())
        
        if (deleteError) {
          console.error('‚ùå Erro ao limpar sess√µes:', deleteError)
        } else {
          console.log('‚úÖ Sess√µes expiradas removidas')
        }
      }
    }
    
    // 2. Verificar sess√µes ativas
    console.log('\nüîç 2. VERIFICANDO SESS√ïES ATIVAS')
    
    const { data: activeSessions, error: activeError } = await supabaseAdmin
      .from('sessions')
      .select('*')
      .gt('expires', new Date().toISOString())
    
    if (activeError) {
      console.error('‚ùå Erro ao buscar sess√µes ativas:', activeError)
    } else {
      console.log(`‚úÖ Sess√µes ativas: ${activeSessions?.length || 0}`)
      
      if (activeSessions && activeSessions.length > 0) {
        activeSessions.forEach(session => {
          console.log(`  - Token: ${session.sessionToken?.substring(0, 20)}...`)
          console.log(`  - User: ${session.userId}`)
          console.log(`  - Expires: ${session.expires}`)
        })
      }
    }
    
    // 3. Verificar usu√°rio agro
    console.log('\nüë§ 3. VERIFICANDO USU√ÅRIO AGRO')
    
    const { data: agroUser, error: agroError } = await supabaseAdmin
      .from('users')
      .select('*')
      .eq('email', 'agro@agro.com.br')
      .single()
    
    if (agroError) {
      console.error('‚ùå Erro ao buscar usu√°rio agro:', agroError)
    } else if (agroUser) {
      console.log('‚úÖ Usu√°rio agro encontrado:')
      console.log(`  - Nome: ${agroUser.name}`)
      console.log(`  - Email: ${agroUser.email}`)
      console.log(`  - Ativo: ${agroUser.is_active}`)
      console.log(`  - Tipo: ${agroUser.user_type}`)
      console.log(`  - Context: ${agroUser.context_id}`)
      
      // Verificar se h√° sess√£o para este usu√°rio
      const { data: userSessions, error: userSessionsError } = await supabaseAdmin
        .from('sessions')
        .select('*')
        .eq('userId', agroUser.id)
        .gt('expires', new Date().toISOString())
      
      if (userSessionsError) {
        console.error('‚ùå Erro ao buscar sess√µes do usu√°rio:', userSessionsError)
      } else {
        console.log(`üìä Sess√µes ativas do usu√°rio agro: ${userSessions?.length || 0}`)
      }
    }
    
    // 4. Criar uma sess√£o de teste para o usu√°rio agro
    console.log('\nüîß 4. CRIANDO SESS√ÉO DE TESTE')
    
    const testSessionToken = `test_${agroUser.id}_${Date.now()}`
    const testSession = {
      id: testSessionToken,
      sessionToken: testSessionToken,
      userId: agroUser.id,
      expires: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // 24 horas
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    }
    
    const { data: newSession, error: createError } = await supabaseAdmin
      .from('sessions')
      .insert(testSession)
      .select()
      .single()
    
    if (createError) {
      console.log('‚ö†Ô∏è Erro ao criar sess√£o de teste:', createError.message)
    } else {
      console.log('‚úÖ Sess√£o de teste criada:')
      console.log(`  - Token: ${testSessionToken}`)
      console.log(`  - User: ${agroUser.id}`)
      console.log(`  - Expires: ${testSession.expires}`)
    }
    
    console.log('\nüéØ CORRE√á√ÉO CONCLU√çDA!')
    console.log('üìã RESUMO:')
    console.log(`- Sess√µes expiradas: ${invalidSessions?.length || 0}`)
    console.log(`- Sess√µes ativas: ${activeSessions?.length || 0}`)
    console.log(`- Usu√°rio agro: ${agroUser ? '‚úÖ Encontrado' : '‚ùå N√£o encontrado'}`)
    console.log(`- Sess√£o de teste: ${newSession ? '‚úÖ Criada' : '‚ùå Erro'}`)
    
    console.log('\nüí° PR√ìXIMOS PASSOS:')
    console.log('1. ‚úÖ Limpeza de sess√µes conclu√≠da')
    console.log('2. ‚úÖ Sess√£o de teste criada')
    console.log('3. üîß Testar login novamente')
    console.log('4. üéØ Se ainda n√£o funcionar, verificar configura√ß√£o NextAuth.js')
    
    return true
    
  } catch (error) {
    console.error('‚ùå Erro geral na corre√ß√£o:', error)
    return false
  }
}

corrigirAuthSession()
